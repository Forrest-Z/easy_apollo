// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/vector_net.proto

#include "modules/prediction/proto/vector_net.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fvector_5fnet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CarPosition_modules_2fprediction_2fproto_2fvector_5fnet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fvector_5fnet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Polyline_modules_2fprediction_2fproto_2fvector_5fnet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fvector_5fnet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VNVector_modules_2fprediction_2fproto_2fvector_5fnet_2eproto;
namespace apollo {
namespace prediction {
class VNVectorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VNVector> _instance;
} _VNVector_default_instance_;
class PolylineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Polyline> _instance;
} _Polyline_default_instance_;
class CarPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CarPosition> _instance;
} _CarPosition_default_instance_;
class VectorNetFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VectorNetFeature> _instance;
} _VectorNetFeature_default_instance_;
class WorldCoordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorldCoord> _instance;
} _WorldCoord_default_instance_;
}  // namespace prediction
}  // namespace apollo
static void InitDefaultsscc_info_CarPosition_modules_2fprediction_2fproto_2fvector_5fnet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_CarPosition_default_instance_;
    new (ptr) ::apollo::prediction::CarPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CarPosition_modules_2fprediction_2fproto_2fvector_5fnet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CarPosition_modules_2fprediction_2fproto_2fvector_5fnet_2eproto}, {}};

static void InitDefaultsscc_info_Polyline_modules_2fprediction_2fproto_2fvector_5fnet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_Polyline_default_instance_;
    new (ptr) ::apollo::prediction::Polyline();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Polyline_modules_2fprediction_2fproto_2fvector_5fnet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Polyline_modules_2fprediction_2fproto_2fvector_5fnet_2eproto}, {
      &scc_info_VNVector_modules_2fprediction_2fproto_2fvector_5fnet_2eproto.base,}};

static void InitDefaultsscc_info_VNVector_modules_2fprediction_2fproto_2fvector_5fnet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_VNVector_default_instance_;
    new (ptr) ::apollo::prediction::VNVector();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VNVector_modules_2fprediction_2fproto_2fvector_5fnet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VNVector_modules_2fprediction_2fproto_2fvector_5fnet_2eproto}, {}};

static void InitDefaultsscc_info_VectorNetFeature_modules_2fprediction_2fproto_2fvector_5fnet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_VectorNetFeature_default_instance_;
    new (ptr) ::apollo::prediction::VectorNetFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VectorNetFeature_modules_2fprediction_2fproto_2fvector_5fnet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_VectorNetFeature_modules_2fprediction_2fproto_2fvector_5fnet_2eproto}, {
      &scc_info_CarPosition_modules_2fprediction_2fproto_2fvector_5fnet_2eproto.base,
      &scc_info_Polyline_modules_2fprediction_2fproto_2fvector_5fnet_2eproto.base,}};

static void InitDefaultsscc_info_WorldCoord_modules_2fprediction_2fproto_2fvector_5fnet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_WorldCoord_default_instance_;
    new (ptr) ::apollo::prediction::WorldCoord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorldCoord_modules_2fprediction_2fproto_2fvector_5fnet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WorldCoord_modules_2fprediction_2fproto_2fvector_5fnet_2eproto}, {
      &scc_info_CarPosition_modules_2fprediction_2fproto_2fvector_5fnet_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fprediction_2fproto_2fvector_5fnet_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fprediction_2fproto_2fvector_5fnet_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fprediction_2fproto_2fvector_5fnet_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::VNVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::VNVector, element_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Polyline, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Polyline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Polyline, vector_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Polyline, p_id_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Polyline, p_id_y_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::CarPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::CarPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::CarPosition, x_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::CarPosition, y_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::CarPosition, phi_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::CarPosition, id_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::VectorNetFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::VectorNetFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::VectorNetFeature, car_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::VectorNetFeature, polyline_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::WorldCoord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::WorldCoord, pose_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::apollo::prediction::VNVector)},
  { 6, 14, sizeof(::apollo::prediction::Polyline)},
  { 17, 26, sizeof(::apollo::prediction::CarPosition)},
  { 30, 37, sizeof(::apollo::prediction::VectorNetFeature)},
  { 39, -1, sizeof(::apollo::prediction::WorldCoord)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_VNVector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_Polyline_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_CarPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_VectorNetFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_WorldCoord_default_instance_),
};

const char descriptor_table_protodef_modules_2fprediction_2fproto_2fvector_5fnet_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)modules/prediction/proto/vector_net.pr"
  "oto\022\021apollo.prediction\"\033\n\010VNVector\022\017\n\007el"
  "ement\030\001 \003(\001\"W\n\010Polyline\022+\n\006vector\030\001 \003(\0132"
  "\033.apollo.prediction.VNVector\022\016\n\006p_id_x\030\002"
  " \001(\001\022\016\n\006p_id_y\030\003 \001(\001\"<\n\013CarPosition\022\t\n\001x"
  "\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\013\n\003phi\030\003 \001(\001\022\n\n\002id\030\004 \001"
  "(\t\"w\n\020VectorNetFeature\0224\n\014car_position\030\001"
  " \001(\0132\036.apollo.prediction.CarPosition\022-\n\010"
  "polyline\030\002 \003(\0132\033.apollo.prediction.Polyl"
  "ine\":\n\nWorldCoord\022,\n\004pose\030\001 \003(\0132\036.apollo"
  ".prediction.CarPosition"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fprediction_2fproto_2fvector_5fnet_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fprediction_2fproto_2fvector_5fnet_2eproto_sccs[5] = {
  &scc_info_CarPosition_modules_2fprediction_2fproto_2fvector_5fnet_2eproto.base,
  &scc_info_Polyline_modules_2fprediction_2fproto_2fvector_5fnet_2eproto.base,
  &scc_info_VNVector_modules_2fprediction_2fproto_2fvector_5fnet_2eproto.base,
  &scc_info_VectorNetFeature_modules_2fprediction_2fproto_2fvector_5fnet_2eproto.base,
  &scc_info_WorldCoord_modules_2fprediction_2fproto_2fvector_5fnet_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fprediction_2fproto_2fvector_5fnet_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fprediction_2fproto_2fvector_5fnet_2eproto = {
  false, false, descriptor_table_protodef_modules_2fprediction_2fproto_2fvector_5fnet_2eproto, "modules/prediction/proto/vector_net.proto", 423,
  &descriptor_table_modules_2fprediction_2fproto_2fvector_5fnet_2eproto_once, descriptor_table_modules_2fprediction_2fproto_2fvector_5fnet_2eproto_sccs, descriptor_table_modules_2fprediction_2fproto_2fvector_5fnet_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::offsets,
  file_level_metadata_modules_2fprediction_2fproto_2fvector_5fnet_2eproto, 5, file_level_enum_descriptors_modules_2fprediction_2fproto_2fvector_5fnet_2eproto, file_level_service_descriptors_modules_2fprediction_2fproto_2fvector_5fnet_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fprediction_2fproto_2fvector_5fnet_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fprediction_2fproto_2fvector_5fnet_2eproto)), true);
namespace apollo {
namespace prediction {

// ===================================================================

class VNVector::_Internal {
 public:
};

VNVector::VNVector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  element_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.VNVector)
}
VNVector::VNVector(const VNVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      element_(from.element_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.VNVector)
}

void VNVector::SharedCtor() {
}

VNVector::~VNVector() {
  // @@protoc_insertion_point(destructor:apollo.prediction.VNVector)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VNVector::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VNVector::ArenaDtor(void* object) {
  VNVector* _this = reinterpret_cast< VNVector* >(object);
  (void)_this;
}
void VNVector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VNVector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VNVector& VNVector::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VNVector_modules_2fprediction_2fproto_2fvector_5fnet_2eproto.base);
  return *internal_default_instance();
}


void VNVector::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.VNVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VNVector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double element = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_element(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_element(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VNVector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.VNVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double element = 1;
  for (int i = 0, n = this->_internal_element_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_element(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.VNVector)
  return target;
}

size_t VNVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.VNVector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double element = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_element_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_element_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VNVector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.VNVector)
  GOOGLE_DCHECK_NE(&from, this);
  const VNVector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VNVector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.VNVector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.VNVector)
    MergeFrom(*source);
  }
}

void VNVector::MergeFrom(const VNVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.VNVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  element_.MergeFrom(from.element_);
}

void VNVector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.VNVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VNVector::CopyFrom(const VNVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.VNVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VNVector::IsInitialized() const {
  return true;
}

void VNVector::InternalSwap(VNVector* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  element_.InternalSwap(&other->element_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VNVector::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Polyline::_Internal {
 public:
  using HasBits = decltype(std::declval<Polyline>()._has_bits_);
  static void set_has_p_id_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_p_id_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Polyline::Polyline(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vector_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.Polyline)
}
Polyline::Polyline(const Polyline& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      vector_(from.vector_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&p_id_x_, &from.p_id_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&p_id_y_) -
    reinterpret_cast<char*>(&p_id_x_)) + sizeof(p_id_y_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.Polyline)
}

void Polyline::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Polyline_modules_2fprediction_2fproto_2fvector_5fnet_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&p_id_x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&p_id_y_) -
      reinterpret_cast<char*>(&p_id_x_)) + sizeof(p_id_y_));
}

Polyline::~Polyline() {
  // @@protoc_insertion_point(destructor:apollo.prediction.Polyline)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Polyline::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Polyline::ArenaDtor(void* object) {
  Polyline* _this = reinterpret_cast< Polyline* >(object);
  (void)_this;
}
void Polyline::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Polyline::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Polyline& Polyline::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Polyline_modules_2fprediction_2fproto_2fvector_5fnet_2eproto.base);
  return *internal_default_instance();
}


void Polyline::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.Polyline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vector_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&p_id_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&p_id_y_) -
        reinterpret_cast<char*>(&p_id_x_)) + sizeof(p_id_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Polyline::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.prediction.VNVector vector = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vector(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double p_id_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_p_id_x(&has_bits);
          p_id_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double p_id_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_p_id_y(&has_bits);
          p_id_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Polyline::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.Polyline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.VNVector vector = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vector_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vector(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional double p_id_x = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_p_id_x(), target);
  }

  // optional double p_id_y = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_p_id_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.Polyline)
  return target;
}

size_t Polyline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.Polyline)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.VNVector vector = 1;
  total_size += 1UL * this->_internal_vector_size();
  for (const auto& msg : this->vector_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double p_id_x = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double p_id_y = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Polyline::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.Polyline)
  GOOGLE_DCHECK_NE(&from, this);
  const Polyline* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Polyline>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.Polyline)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.Polyline)
    MergeFrom(*source);
  }
}

void Polyline::MergeFrom(const Polyline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.Polyline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vector_.MergeFrom(from.vector_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      p_id_x_ = from.p_id_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      p_id_y_ = from.p_id_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Polyline::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.Polyline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polyline::CopyFrom(const Polyline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.Polyline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polyline::IsInitialized() const {
  return true;
}

void Polyline::InternalSwap(Polyline* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vector_.InternalSwap(&other->vector_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Polyline, p_id_y_)
      + sizeof(Polyline::p_id_y_)
      - PROTOBUF_FIELD_OFFSET(Polyline, p_id_x_)>(
          reinterpret_cast<char*>(&p_id_x_),
          reinterpret_cast<char*>(&other->p_id_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Polyline::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CarPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<CarPosition>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_phi(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CarPosition::CarPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.CarPosition)
}
CarPosition::CarPosition(const CarPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&phi_) -
    reinterpret_cast<char*>(&x_)) + sizeof(phi_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.CarPosition)
}

void CarPosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CarPosition_modules_2fprediction_2fproto_2fvector_5fnet_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&phi_) -
      reinterpret_cast<char*>(&x_)) + sizeof(phi_));
}

CarPosition::~CarPosition() {
  // @@protoc_insertion_point(destructor:apollo.prediction.CarPosition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CarPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CarPosition::ArenaDtor(void* object) {
  CarPosition* _this = reinterpret_cast< CarPosition* >(object);
  (void)_this;
}
void CarPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CarPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CarPosition& CarPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CarPosition_modules_2fprediction_2fproto_2fvector_5fnet_2eproto.base);
  return *internal_default_instance();
}


void CarPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.CarPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&phi_) -
        reinterpret_cast<char*>(&x_)) + sizeof(phi_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CarPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double phi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_phi(&has_bits);
          phi_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.prediction.CarPosition.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CarPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.CarPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // optional double phi = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_phi(), target);
  }

  // optional string id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.CarPosition.id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.CarPosition)
  return target;
}

size_t CarPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.CarPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string id = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional double x = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double phi = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CarPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.CarPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CarPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CarPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.CarPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.CarPosition)
    MergeFrom(*source);
  }
}

void CarPosition::MergeFrom(const CarPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.CarPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      phi_ = from.phi_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CarPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.CarPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarPosition::CopyFrom(const CarPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.CarPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarPosition::IsInitialized() const {
  return true;
}

void CarPosition::InternalSwap(CarPosition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CarPosition, phi_)
      + sizeof(CarPosition::phi_)
      - PROTOBUF_FIELD_OFFSET(CarPosition, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CarPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VectorNetFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<VectorNetFeature>()._has_bits_);
  static const ::apollo::prediction::CarPosition& car_position(const VectorNetFeature* msg);
  static void set_has_car_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::prediction::CarPosition&
VectorNetFeature::_Internal::car_position(const VectorNetFeature* msg) {
  return *msg->car_position_;
}
VectorNetFeature::VectorNetFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  polyline_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.VectorNetFeature)
}
VectorNetFeature::VectorNetFeature(const VectorNetFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      polyline_(from.polyline_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_car_position()) {
    car_position_ = new ::apollo::prediction::CarPosition(*from.car_position_);
  } else {
    car_position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.VectorNetFeature)
}

void VectorNetFeature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VectorNetFeature_modules_2fprediction_2fproto_2fvector_5fnet_2eproto.base);
  car_position_ = nullptr;
}

VectorNetFeature::~VectorNetFeature() {
  // @@protoc_insertion_point(destructor:apollo.prediction.VectorNetFeature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorNetFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete car_position_;
}

void VectorNetFeature::ArenaDtor(void* object) {
  VectorNetFeature* _this = reinterpret_cast< VectorNetFeature* >(object);
  (void)_this;
}
void VectorNetFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorNetFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VectorNetFeature& VectorNetFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VectorNetFeature_modules_2fprediction_2fproto_2fvector_5fnet_2eproto.base);
  return *internal_default_instance();
}


void VectorNetFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.VectorNetFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polyline_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(car_position_ != nullptr);
    car_position_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorNetFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.prediction.CarPosition car_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_car_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.prediction.Polyline polyline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polyline(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorNetFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.VectorNetFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.prediction.CarPosition car_position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::car_position(this), target, stream);
  }

  // repeated .apollo.prediction.Polyline polyline = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_polyline_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_polyline(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.VectorNetFeature)
  return target;
}

size_t VectorNetFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.VectorNetFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.Polyline polyline = 2;
  total_size += 1UL * this->_internal_polyline_size();
  for (const auto& msg : this->polyline_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .apollo.prediction.CarPosition car_position = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *car_position_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorNetFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.VectorNetFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorNetFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorNetFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.VectorNetFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.VectorNetFeature)
    MergeFrom(*source);
  }
}

void VectorNetFeature::MergeFrom(const VectorNetFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.VectorNetFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polyline_.MergeFrom(from.polyline_);
  if (from._internal_has_car_position()) {
    _internal_mutable_car_position()->::apollo::prediction::CarPosition::MergeFrom(from._internal_car_position());
  }
}

void VectorNetFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.VectorNetFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorNetFeature::CopyFrom(const VectorNetFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.VectorNetFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorNetFeature::IsInitialized() const {
  return true;
}

void VectorNetFeature::InternalSwap(VectorNetFeature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  polyline_.InternalSwap(&other->polyline_);
  swap(car_position_, other->car_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorNetFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WorldCoord::_Internal {
 public:
};

WorldCoord::WorldCoord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pose_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.WorldCoord)
}
WorldCoord::WorldCoord(const WorldCoord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pose_(from.pose_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.WorldCoord)
}

void WorldCoord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorldCoord_modules_2fprediction_2fproto_2fvector_5fnet_2eproto.base);
}

WorldCoord::~WorldCoord() {
  // @@protoc_insertion_point(destructor:apollo.prediction.WorldCoord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorldCoord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WorldCoord::ArenaDtor(void* object) {
  WorldCoord* _this = reinterpret_cast< WorldCoord* >(object);
  (void)_this;
}
void WorldCoord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorldCoord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorldCoord& WorldCoord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorldCoord_modules_2fprediction_2fproto_2fvector_5fnet_2eproto.base);
  return *internal_default_instance();
}


void WorldCoord::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.WorldCoord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pose_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorldCoord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.prediction.CarPosition pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pose(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorldCoord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.WorldCoord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.CarPosition pose = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pose_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pose(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.WorldCoord)
  return target;
}

size_t WorldCoord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.WorldCoord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.CarPosition pose = 1;
  total_size += 1UL * this->_internal_pose_size();
  for (const auto& msg : this->pose_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorldCoord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.WorldCoord)
  GOOGLE_DCHECK_NE(&from, this);
  const WorldCoord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorldCoord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.WorldCoord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.WorldCoord)
    MergeFrom(*source);
  }
}

void WorldCoord::MergeFrom(const WorldCoord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.WorldCoord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pose_.MergeFrom(from.pose_);
}

void WorldCoord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.WorldCoord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldCoord::CopyFrom(const WorldCoord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.WorldCoord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldCoord::IsInitialized() const {
  return true;
}

void WorldCoord::InternalSwap(WorldCoord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pose_.InternalSwap(&other->pose_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldCoord::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace prediction
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::prediction::VNVector* Arena::CreateMaybeMessage< ::apollo::prediction::VNVector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::VNVector >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::Polyline* Arena::CreateMaybeMessage< ::apollo::prediction::Polyline >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::Polyline >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::CarPosition* Arena::CreateMaybeMessage< ::apollo::prediction::CarPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::CarPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::VectorNetFeature* Arena::CreateMaybeMessage< ::apollo::prediction::VectorNetFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::VectorNetFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::WorldCoord* Arena::CreateMaybeMessage< ::apollo::prediction::WorldCoord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::WorldCoord >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
