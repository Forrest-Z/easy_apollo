syntax = "proto2";

package apollo.planning;

import "modules/common/proto/geometry.proto";
import "modules/common/proto/vehicle_signal.proto";
import "modules/routing/proto/routing.proto";
import "modules/planning/proto/planning_status.proto";

message TargetLane {
  // lane id
  optional string id = 1;
  optional double start_s = 2;      // in meters
  optional double end_s = 3;        // in meters
  optional double speed_limit = 4;  // in m/s
}

message ObjectIgnore {}

//纵向决策中，涉及到s。s是后轴中心的，车头的？
enum StopReasonCode {
  STOP_REASON_HEAD_VEHICLE = 1;
  STOP_REASON_DESTINATION = 2;
  STOP_REASON_PEDESTRIAN = 3;
  STOP_REASON_OBSTACLE = 4;
  STOP_REASON_PREPARKING = 5;
  STOP_REASON_SIGNAL = 100;  // only for red signal
  STOP_REASON_STOP_SIGN = 101;
  STOP_REASON_YIELD_SIGN = 102;
  STOP_REASON_CLEAR_ZONE = 103;
  STOP_REASON_CROSSWALK = 104;
  STOP_REASON_CREEPER = 105;
  STOP_REASON_REFERENCE_END = 106;  // end of the reference_line
  STOP_REASON_YELLOW_SIGNAL = 107;  // yellow signal
  STOP_REASON_PULL_OVER = 108;      // pull over
  STOP_REASON_SIDEPASS_SAFETY = 109;
  STOP_REASON_PRE_OPEN_SPACE_STOP = 200;
  STOP_REASON_LANE_CHANGE_URGENCY = 201;
  STOP_REASON_EMERGENCY = 202;
}

// 停车位置，以车头为准？后轴中心为准？
message ObjectStop {
  optional StopReasonCode reason_code = 1;
  // s is from ego? from ref line? s是相对于障碍物的，比如在obs后方10米。
  // 这个值是车头的？还是后轴的？车头和障碍物的距离. 一般是负值，如-1米
  optional double distance_s = 2;  // in meters
  // When stopped, the front center of vehicle should be at this point.
  // 这个point来源于ref line, 表示车头的停止点

  // 对于red light,存在一个stop line，如何转换成stop point: stop line得到 ref line s，
  // s得到ref line的point，这个point就是stop point。车头的stop point
  optional apollo.common.PointENU stop_point = 3;
  // When stopped, the heading of the vehicle should be stop_heading.
  // heading 来源于 ref line
  optional double stop_heading = 4;

  // what is it:
  repeated string wait_for_obstacle = 5;
}

// dodge the obstacle in lateral direction when driving
message ObjectNudge {
  enum Type {
    LEFT_NUDGE = 1;   // drive from the left side to nudge a static obstacle
    RIGHT_NUDGE = 2;  // drive from the right side to nudge a static obstacle
    DYNAMIC_LEFT_NUDGE = 3;   // drive from the left side to nudge a dynamic obstacle
    DYNAMIC_RIGHT_NUDGE = 4;  // drive from the right side to nudge a dynamic obstacle
  };
  optional Type type = 1;
  // minimum lateral distance in meters. positive if type = LEFT_NUDGE
  // negative if type = RIGHT_NUDGE
  optional double distance_l = 2;
}

// point of interest
message st_gap_poi
{
  // 交互时间
  optional double time  = 1;

  // 两者速度曲线，计算得到的lon s gap, obs_lower - ego s
  optional double s_gap = 2;

};

enum YieldAccMode
{
    YIELD_ACC_MODE_CONSTANT_SPEED =1;
    YIELD_ACC_MODE_SOFT_BRAKE =2;
    YIELD_ACC_MODE_HARD_BRAKE =3;
    YIELD_ACC_MODE_HARD_BRAKE_AND_WILL_COLLISION =4;
    YIELD_ACC_MODE_NOT_SURE =7;
};

message yield_interaction_info
{
  optional  bool has_interaction = 1;

  // st图中的第一个交互点
  optional st_gap_poi start_point = 2; 
  optional st_gap_poi end_point = 3;

  // 最小gap的记录
  optional st_gap_poi min_gap_point = 4;
};

message ObjectYield {
  optional double distance_s = 1;  // minimum longitudinal distance in meters
  optional apollo.common.PointENU fence_point = 2;
  optional double fence_heading = 3;
  optional double time_buffer = 4;  // minimum time buffer required after the
                                    // obstacle reaches the intersect point.

  optional YieldAccMode yield_acc_mode = 5;
  optional yield_interaction_info yield_poi = 6;
}

enum FollowingAccMode
{
    HARD_ACCELERATION  =1;
    SOFT_ACCELERATION =2;
    CONSTANT_SPEED =3;
    SOFT_BRAKE =4;
    HARD_BRAKE =5;
    HARD_BRAKE_AND_WILL_COLLISION =6;
    NOT_SURE =7;
};

message follow_interaction_info
{
  // 不一定相交才是交互，两个曲线存在相同的时间戳，就算存在交互
  optional  bool has_intersection = 1;

  // st图中的第一个交互点
  optional st_gap_poi start_point = 2; 
  optional st_gap_poi end_point = 3;

  // 最小gap的记录
  optional st_gap_poi min_gap_point = 4;
};


message ObjectFollow {
  optional double distance_s = 1;  // minimum longitudinal distance in meters

  // 表明车头位置
  optional apollo.common.PointENU fence_point = 2;
  optional double fence_heading = 3;
  optional FollowingAccMode following_acc_mode = 4;
  
  optional follow_interaction_info following_interaction_info = 5;
}

message ObjectOvertake {
  // 从哪个点到哪个点的距离： 车尾和obs的距离？
  optional double distance_s = 1;  // minimum longitudinal distance in meters
  optional apollo.common.PointENU fence_point = 2;
  optional double fence_heading = 3;
  optional double time_buffer = 4;  // minimum time buffer required before the
                                    // obstacle reaches the intersect point.
}

// side pass, nudge区别：一样的，side_pass没有被使用
message ObjectSidePass {
  enum Type {
    LEFT = 1;
    RIGHT = 2;
  };
  optional Type type = 1;
}

// unified object decision while estop
message ObjectAvoid {}

message ObjectStatus {
  optional ObjectMotionType motion_type = 1;
  optional ObjectDecisionType decision_type = 2;
}

message ObjectStatic {}

message ObjectDynamic {}

message ObjectMotionType {
  oneof motion_tag {
    ObjectStatic static = 1;
    ObjectDynamic dynamic = 2;
  }
}

message ObjectDecisionType {
  oneof object_tag {
    ObjectIgnore ignore = 1;
    ObjectStop stop = 2;
    ObjectFollow follow = 3;
    ObjectYield yield = 4;
    ObjectOvertake overtake = 5;
    ObjectNudge nudge = 6;
    ObjectAvoid avoid = 7;
    ObjectSidePass side_pass = 8;
  }
}

message ObjectDecision {
  optional string id = 1;
  optional int32 perception_id = 2;

  // 一个obs可能有多个decision, 比和lateral, lon decision
  repeated ObjectDecisionType object_decision = 3;
}

message ObjectDecisions {
  repeated ObjectDecision decision = 1;
}

// update by MakeMainStopDecision()
message MainStop {
  optional StopReasonCode reason_code = 1;

  // 记录obs id, 等
  optional string reason = 2;
  
  // When stopped, the front center of vehicle should be at this point.
  optional apollo.common.PointENU stop_point = 3;
  
  // When stopped, the heading of the vehicle should be stop_heading.
  optional double stop_heading = 4;
  
  optional apollo.routing.ChangeLaneType change_lane_type = 5;
}

message EmergencyStopHardBrake {}

message EmergencyStopCruiseToStop {}

message MainEmergencyStop {
  // Unexpected event happened, human driver is required to take over
  enum ReasonCode {
    ESTOP_REASON_INTERNAL_ERR = 1;
    ESTOP_REASON_COLLISION = 2;
    ESTOP_REASON_ST_FIND_PATH = 3;
    ESTOP_REASON_ST_MAKE_DECISION = 4;
    ESTOP_REASON_SENSOR_ERROR = 5;
  }
  optional ReasonCode reason_code = 1;
  optional string reason = 2;
  oneof task {
    EmergencyStopHardBrake hard_brake = 3;         // hard brake
    EmergencyStopCruiseToStop cruise_to_stop = 4;  // cruise to stop
  }
}

message MainCruise {
  // cruise current lane
  optional apollo.routing.ChangeLaneType change_lane_type = 1;
}

// This message is deprecated
message MainChangeLane {
  enum Type {
    LEFT = 1;
    RIGHT = 2;
  };
  optional Type type = 1;
  repeated TargetLane default_lane = 2;
  optional MainStop default_lane_stop = 3;
  optional MainStop target_lane_stop = 4;
}

message MainMissionComplete {
  // arrived at routing destination
  // When stopped, the front center of vehicle should be at this point.
  optional apollo.common.PointENU stop_point = 1;
  // When stopped, the heading of the vehicle should be stop_heading.
  optional double stop_heading = 2;
}

message MainNotReady {
  // decision system is not ready.
  // e.g. wait for routing data.
  optional string reason = 1;
}

message MainParking {
  enum ParkingStatus {
    // TODO(QiL): implement and expand to more enums
    IN_PARKING = 1;
  }
  optional ParkingStatus status = 1;
}

message MainDecision {
  
  oneof task {
    MainCruise cruise = 1;
    MainStop stop = 2;
    MainEmergencyStop estop = 3;
    MainChangeLane change_lane = 4 [deprecated = true];
    MainMissionComplete mission_complete = 6;
    MainNotReady not_ready = 7;
    MainParking parking = 8;
  }

  // target lane 分别是：
  // lane follow:
  // lane change:
  repeated TargetLane target_lane = 5 [deprecated = true];
}

message DecisionResult {
  // updated by MakeDecision()，记录最重要决策
  optional MainDecision main_decision = 1;

  // 决策结果，每一个obs都有
  optional ObjectDecisions object_decision = 2;
  // 车身信号
  optional apollo.common.VehicleSignal vehicle_signal = 3;

  optional LaneBorrowStatus lane_borrow_decider = 4;

  optional ChangeLaneStatus change_lane = 5;
}
