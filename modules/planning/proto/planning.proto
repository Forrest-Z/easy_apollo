syntax = "proto2";

package apollo.planning;

import "modules/canbus/proto/chassis.proto";
import "modules/common/proto/drive_state.proto";
import "modules/common/proto/geometry.proto";
import "modules/common/proto/header.proto";
import "modules/common/proto/pnc_point.proto";
import "modules/map/proto/map_id.proto";
import "modules/planning/proto/decision.proto";
import "modules/planning/proto/planning_internal.proto";

message EStop {
  // is_estop == true when emergency stop is required
  optional bool is_estop = 1;
  optional string reason = 2;
}

message TaskStats {
  optional string name = 1;
  optional double time_ms = 2;
}

message LatencyStats {
  optional double total_time_ms = 1;
  repeated TaskStats task_stats = 2;
  optional double init_frame_time_ms = 3;
}

enum JucType {
  UNKNOWN = 0;
  IN_ROAD = 1;
  CROSS_ROAD = 2;
  FORK_ROAD = 3;
  MAIN_SIDE = 4;
  DEAD_END = 5;
}

message RSSInfo {
  optional bool is_rss_safe = 1;
  optional double cur_dist_lon = 2;
  optional double rss_safe_dist_lon = 3;
  optional double acc_lon_range_minimum = 4;
  optional double acc_lon_range_maximum = 5;
  optional double acc_lat_left_range_minimum = 6;
  optional double acc_lat_left_range_maximum = 7;
  optional double acc_lat_right_range_minimum = 8;
  optional double acc_lat_right_range_maximum = 9;
}

enum path_boundary_type {
    PATH_BOUND_LANE_KEEP =1;
    PATH_BOUND_LANE_BORROW_LEFT =2;
    PATH_BOUND_LANE_BORROW_RIGHT=3;
    PATH_BOUND_PULL_OVER = 4;
    PATH_BOUND_LANE_CHANGE_LEFT = 5;
    PATH_BOUND_LANE_CHANGE_RIGHT = 6;
    PATH_BOUND_FALLBACK =7;
};

enum interaction_secenerio_type {

    INTERACTION_SECENERIO_UNKNOWN = 0;
    INTERACTION_SECENERIO_STOP = 1;
    INTERACTION_SECENERIO_FOLLOW = 2;
    INTERACTION_SECENERIO_SPEED_KEEP_FOLLOW = 4;
    INTERACTION_SECENERIO_SPEED_DOWN_FOLLOW = 5;
    INTERACTION_SECENERIO_SPEED_UP_FOLLOW = 6;
    
    INTERACTION_SECENERIO_YIELD = 7;
    INTERACTION_SECENERIO_OVERTAKE = 8;
    INTERACTION_SECENERIO_CAUTION = 9;

    // lane change / lane borrow related speed decision 
    // if in IN_LANE_BORROW, 一定要更新这个值
    // lane borrowing，只使用speed decision做acc 决策.
    INTERACTION_SECENERIO_SPEED_KEEP_LANE_CHANE = 10;
    INTERACTION_SECENERIO_SPEED_DOWN_LANE_CHANE = 11;
    INTERACTION_SECENERIO_SPEED_UP_LANE_CHANE = 12;

};

message SpeedDecision {
  optional interaction_secenerio_type type = 1;

  optional double acc = 2;  // in meters
  
  // following obs ttc
  optional double ttc = 3;

    // following obs thd
  optional double time_headway = 4;


}

// next id: 24
message ADCTrajectory {
  // header里面的时间戳，每一帧都更新？
  optional apollo.common.Header header = 1;

  optional double total_path_length = 2;  // in meters
  
  optional double total_path_time = 3;    // in seconds
  
  optional EStop estop = 6;
  
  optional apollo.planning_internal.Debug debug = 8;
  
  // is_replan == true mean replan triggered
  optional bool is_replan = 9 [default = false];
  
  // Specify trajectory gear
  optional apollo.canbus.Chassis.GearPosition gear = 10;
  
  // path data + speed data
  repeated apollo.common.TrajectoryPoint trajectory_point = 12;
  
  // path point without speed info, apollo好像没有赋值，这里暂时存储横向path
  repeated apollo.common.PathPoint path_point = 13;
  
  optional apollo.planning.DecisionResult decision = 14;
  
  optional LatencyStats latency_stats = 15;
  
  // the routing used for current planning result
  optional apollo.common.Header routing_header = 16;
  enum RightOfWayStatus {
    UNPROTECTED = 0;
    PROTECTED = 1;
  }
  optional RightOfWayStatus right_of_way_status = 17;
  
  // lane id along current reference line
  repeated apollo.hdmap.Id lane_id = 18;
  
  // set the engage advice for based on current planning result.
  optional apollo.common.EngageAdvice engage_advice = 19;
  
  // the region where planning cares most
  message CriticalRegion {
    repeated apollo.common.Polygon region = 1;
  }
  // critical region will be empty when planning is NOT sure which region is
  // critical
  // critical regions may or may not overlap
  optional CriticalRegion critical_region = 20;
  
  enum TrajectoryType {
    UNKNOWN = 0;
    NORMAL = 1;
    PATH_FALLBACK = 2;
    SPEED_FALLBACK = 3;
    PATH_REUSED = 4;
  }
  optional TrajectoryType trajectory_type = 21 [default = UNKNOWN];
  
  optional string replan_reason = 22;
  
  // lane id along target reference line
  repeated apollo.hdmap.Id target_lane_id = 23;
  
  // complete dead end flag
  optional bool car_in_dead_end = 24;
  
  optional path_boundary_type path_type = 25;

  optional SpeedDecision speed_decision = 26;

  // output related to RSS
  optional RSSInfo rss_info = 100;
}
