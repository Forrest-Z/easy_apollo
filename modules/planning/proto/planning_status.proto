syntax = "proto2";

package apollo.planning;

import "modules/common/proto/geometry.proto";
import "modules/planning/proto/planning_config.proto";
import "modules/routing/proto/routing.proto";

/*
  This file defines the data types that represents the internal state of the
  planning module.
  It will not be refreshed in each planning cycle.
*/

message BareIntersectionStatus {
  optional string current_pnc_junction_overlap_id = 1;
  optional string done_pnc_junction_overlap_id = 2;
  optional uint32 clear_counter = 3;
}

enum LaneChangeRequestType {
    LANE_CHANG_EREQUEST_NONE  = 1;
    STATIC_OBSTACLE_BLOCKING =2;
    LOW_SPEED_OBSTACLE_BLOCKING =3;
    NEED_ENTER_PRIORITY_LANE =4;
};



message ChangeLaneStatus {
  enum Status {
    IN_CHANGE_LANE = 1;        // during change lane state
    CHANGE_LANE_FAILED = 2;    // change lane failed
    CHANGE_LANE_FINISHED = 3;  // change lane finished
    CHANGE_LANE_PREPARE = 4;  // change lane prepare
  }
  optional Status status = 1;
  // the id of the route segment that the vehicle is driving on
  optional string path_id = 2;
  // the time stamp when the state started.
  optional double timestamp = 3;

  // the starting position only after which lane-change can happen.
  // 存在lane change start point
  // if env is clear, false
  // if env is not clear, true
  // 环境not clear时，设置lane change 预备点?
  // apollo的设计是，配置一个参数生成换道预备点，点之后的path boudary可以跨车道，
  // 预备点之前的轨迹不能跨车道。
  optional bool exist_lane_change_start_position = 4 [default = false];

  optional apollo.common.Point3D lane_change_start_position = 5;

  // the last time stamp when the lane-change planning succeed.
  optional double last_succeed_timestamp = 6;

  // if the current path and speed planning on the lane-change
  // reference-line succeed.
  optional bool is_current_opt_succeed = 7 [default = false];

  // denotes if the surrounding area is clear for ego vehicle to
  // change lane at this moment.
  optional bool is_clear_to_change_lane = 8 [default = false];
}

message CreepDeciderStatus {
  optional uint32 creep_clear_counter = 1;
}

message StopTime {
  optional string obstacle_id = 1;
  // the timestamp when start stopping for the crosswalk
  optional double stop_timestamp_sec = 2;
}

message CrosswalkStatus {
  optional string crosswalk_id = 1;
  // the timestamp when start stopping for the crosswalk
  repeated StopTime stop_time = 2;
  repeated string finished_crosswalk = 3;
}

// update by MakeMainMissionCompleteDecision
message DestinationStatus {
  optional bool has_passed_destination = 1 [default = false];
}

message EmergencyStopStatus {
  optional apollo.common.PointENU stop_fence_point = 1;
}

message OpenSpaceStatus {
  repeated string partitioned_trajectories_index_history = 1;
  optional bool position_init = 2 [default = false];
}

message ParkAndGoStatus {
  optional apollo.common.PointENU adc_init_position = 1;
  optional double adc_init_heading = 2;
  optional bool in_check_stage = 3;
  optional apollo.common.PointENU adc_adjust_end_pose = 4;
}

// 主要和lane borrow 相关

enum LaneBorrowStateType {
  LANE_BORROW_FINISH = 1; 
  IN_LANE_BORROW = 2; 
  LANE_BORROW_PREPARE = 3; 
  LANE_BORROW_FAIL = 4; 
}

enum LaneBorrowReason {
  LANE_BLOCKED_BY_STOPPED_OBS = 1;  
  LANE_BLOCKED_BY_LOW_SPEED_OBS = 2;  
  LANE_BORROW_BY_HUMAN = 3;  
}

enum LaneBorrowDirection {
  LANE_BORROW_DIRECTION_LEFT = 1;   // borrow left neighbor lane
  LANE_BORROW_DIRECTION_RIGHT = 2;  // borrow right neighbor lane
}

message LaneBorrowByTurtleVehicle {

  // 障碍物计时
  optional int32 obstacle_blocking_counter = 1 [default = 0];

  optional int32 able_to_use_self_lane_counter = 2 [default = 0];
 
  optional string obstacle_id = 3 [default = ""];
  
  repeated LaneBorrowDirection decided_side_pass_direction = 4;

  optional LaneBorrowReason lane_borrow_reason = 5;

  // lane borrow time
  // 从车辆中心进入其他车道,时间开始计算。
  // ego要想回到prior lane, 取消lane borrow decision 需要满足：
  // lane borrow time必须要大于8秒才能回来；
  optional int32 lane_borrow_counter = 6;
}


message LaneBorrowManual {
  // 人类触发的lane borrow
  optional bool lane_borrow_by_manual = 1;
  optional LaneBorrowDirection lane_borrow_dir = 2;
}

message LaneBorrowStatus {

  // 障碍物计时
  optional int32 front_static_obstacle_cycle_counter = 1 [default = 0];

  optional int32 able_to_use_self_lane_counter = 2 [default = 0];
  // 处于准备lane borrow, 正在 lane borrow state
  optional bool is_in_path_lane_borrow_scenario = 3 [default = false];
  
  optional string front_static_obstacle_id = 4 [default = ""];
  
  repeated LaneBorrowDirection decided_side_pass_direction = 5;

  optional LaneBorrowStateType status = 6;

  optional LaneBorrowReason lane_borrow_reason = 7;

  // 龟速车辆引起的借道，临时方案，以后会开发lane change method
  optional LaneBorrowByTurtleVehicle lane_borrow_by_turtle = 8;

  // human 触发的lane borrow decision
  optional LaneBorrowManual lane_borrow_by_human = 9;

  // adc center 和 lane center误差在0.2m，是true
  optional bool is_adc_center_in_lane_center = 10;


}

message PullOverStatus {
  enum PullOverType {
    PULL_OVER = 1;            // pull-over upon destination arrival
    EMERGENCY_PULL_OVER = 2;  // emergency pull-over
  }
  optional PullOverType pull_over_type = 1;
  optional bool plan_pull_over_path = 2 [default = false];
  optional apollo.common.PointENU position = 3;
  optional double theta = 4;
  optional double length_front = 5;
  optional double length_back = 6;
  optional double width_left = 7;
  optional double width_right = 8;
}

message ReroutingStatus {
  optional double last_rerouting_time = 1;
  optional bool need_rerouting = 2 [default = false];
  optional apollo.routing.RoutingRequest routing_request = 3;
}

message SpeedDeciderStatus {
  // 记录行人时间
  repeated StopTime pedestrian_stop_time = 1;
}

message ScenarioStatus {
  optional ScenarioConfig.ScenarioType scenario_type = 1;
  optional ScenarioConfig.StageType stage_type = 2;
}

message StopSignStatus {
  optional string current_stop_sign_overlap_id = 1;
  optional string done_stop_sign_overlap_id = 2;
  repeated string wait_for_obstacle_id = 3;
}

message TrafficLightStatus {
  repeated string current_traffic_light_overlap_id = 1;
  repeated string done_traffic_light_overlap_id = 2;
}

message YieldSignStatus {
  repeated string current_yield_sign_overlap_id = 1;
  repeated string done_yield_sign_overlap_id = 2;
  repeated string wait_for_obstacle_id = 3;
}

// note: please keep this one as minimal as possible. do NOT pollute it.
// 基本的planning 内部状态，不需要publish
message PlanningStatus {
  optional BareIntersectionStatus bare_intersection = 1;
  optional ChangeLaneStatus change_lane = 2;
  optional CreepDeciderStatus creep_decider = 3;
  optional CrosswalkStatus crosswalk = 4;
  optional DestinationStatus destination = 5;
  optional EmergencyStopStatus emergency_stop = 6;
  optional OpenSpaceStatus open_space = 7;
  optional ParkAndGoStatus park_and_go = 8;
  optional LaneBorrowStatus lane_borrow_decider = 9;
  optional PullOverStatus pull_over = 10;
  optional ReroutingStatus rerouting = 11;
  optional ScenarioStatus scenario = 12;
  optional SpeedDeciderStatus speed_decider = 13;
  optional StopSignStatus stop_sign = 14;
  optional TrafficLightStatus traffic_light = 15;
  optional YieldSignStatus yield_sign = 16;
}
