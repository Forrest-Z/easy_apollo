// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_semantic_map_config.proto

#include "modules/planning/proto/planning_semantic_map_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace apollo {
namespace planning {
class PlanningSemanticMapConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanningSemanticMapConfig> _instance;
} _PlanningSemanticMapConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static void InitDefaultsscc_info_PlanningSemanticMapConfig_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PlanningSemanticMapConfig_default_instance_;
    new (ptr) ::apollo::planning::PlanningSemanticMapConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlanningSemanticMapConfig_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlanningSemanticMapConfig_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningSemanticMapConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningSemanticMapConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningSemanticMapConfig, resolution_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningSemanticMapConfig, height_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningSemanticMapConfig, width_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningSemanticMapConfig, ego_idx_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningSemanticMapConfig, ego_idx_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningSemanticMapConfig, max_rand_delta_phi_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningSemanticMapConfig, max_ego_future_horizon_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningSemanticMapConfig, max_ego_past_horizon_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningSemanticMapConfig, max_obs_future_horizon_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningSemanticMapConfig, max_obs_past_horizon_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningSemanticMapConfig, base_map_padding_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningSemanticMapConfig, city_driving_max_speed_),
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  1,
  11,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(::apollo::planning::PlanningSemanticMapConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_PlanningSemanticMapConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n9modules/planning/proto/planning_semant"
  "ic_map_config.proto\022\017apollo.planning\"\310\002\n"
  "\031PlanningSemanticMapConfig\022\022\n\nresolution"
  "\030\001 \001(\001\022\016\n\006height\030d \001(\005\022\r\n\005width\030e \001(\005\022\021\n"
  "\tego_idx_x\030f \001(\005\022\021\n\tego_idx_y\030g \001(\005\022\032\n\022m"
  "ax_rand_delta_phi\030h \001(\001\022\036\n\026max_ego_futur"
  "e_horizon\030i \001(\001\022\034\n\024max_ego_past_horizon\030"
  "j \001(\001\022\036\n\026max_obs_future_horizon\030k \001(\001\022\034\n"
  "\024max_obs_past_horizon\030l \001(\001\022\031\n\020base_map_"
  "padding\030\310\001 \001(\005\022\037\n\026city_driving_max_speed"
  "\030\311\001 \001(\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto_sccs[1] = {
  &scc_info_PlanningSemanticMapConfig_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto = {
  false, false, descriptor_table_protodef_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto, "modules/planning/proto/planning_semantic_map_config.proto", 407,
  &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto_sccs, descriptor_table_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto, 1, file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto)), true);
namespace apollo {
namespace planning {

// ===================================================================

class PlanningSemanticMapConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningSemanticMapConfig>()._has_bits_);
  static void set_has_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ego_idx_x(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ego_idx_y(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_rand_delta_phi(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_ego_future_horizon(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_max_ego_past_horizon(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_max_obs_future_horizon(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_max_obs_past_horizon(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_base_map_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_city_driving_max_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

PlanningSemanticMapConfig::PlanningSemanticMapConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PlanningSemanticMapConfig)
}
PlanningSemanticMapConfig::PlanningSemanticMapConfig(const PlanningSemanticMapConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&resolution_, &from.resolution_,
    static_cast<size_t>(reinterpret_cast<char*>(&city_driving_max_speed_) -
    reinterpret_cast<char*>(&resolution_)) + sizeof(city_driving_max_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlanningSemanticMapConfig)
}

void PlanningSemanticMapConfig::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&resolution_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&city_driving_max_speed_) -
      reinterpret_cast<char*>(&resolution_)) + sizeof(city_driving_max_speed_));
}

PlanningSemanticMapConfig::~PlanningSemanticMapConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlanningSemanticMapConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlanningSemanticMapConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlanningSemanticMapConfig::ArenaDtor(void* object) {
  PlanningSemanticMapConfig* _this = reinterpret_cast< PlanningSemanticMapConfig* >(object);
  (void)_this;
}
void PlanningSemanticMapConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlanningSemanticMapConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanningSemanticMapConfig& PlanningSemanticMapConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlanningSemanticMapConfig_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PlanningSemanticMapConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlanningSemanticMapConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&resolution_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_ego_future_horizon_) -
        reinterpret_cast<char*>(&resolution_)) + sizeof(max_ego_future_horizon_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&max_ego_past_horizon_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&city_driving_max_speed_) -
        reinterpret_cast<char*>(&max_ego_past_horizon_)) + sizeof(city_driving_max_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlanningSemanticMapConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double resolution = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_resolution(&has_bits);
          resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 height = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 width = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ego_idx_x = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ego_idx_x(&has_bits);
          ego_idx_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ego_idx_y = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_ego_idx_y(&has_bits);
          ego_idx_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double max_rand_delta_phi = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_max_rand_delta_phi(&has_bits);
          max_rand_delta_phi_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_ego_future_horizon = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_max_ego_future_horizon(&has_bits);
          max_ego_future_horizon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_ego_past_horizon = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_max_ego_past_horizon(&has_bits);
          max_ego_past_horizon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_obs_future_horizon = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_max_obs_future_horizon(&has_bits);
          max_obs_future_horizon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_obs_past_horizon = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_max_obs_past_horizon(&has_bits);
          max_obs_past_horizon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 base_map_padding = 200;
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_base_map_padding(&has_bits);
          base_map_padding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double city_driving_max_speed = 201;
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_city_driving_max_speed(&has_bits);
          city_driving_max_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanningSemanticMapConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlanningSemanticMapConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double resolution = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_resolution(), target);
  }

  // optional int32 height = 100;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(100, this->_internal_height(), target);
  }

  // optional int32 width = 101;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(101, this->_internal_width(), target);
  }

  // optional int32 ego_idx_x = 102;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(102, this->_internal_ego_idx_x(), target);
  }

  // optional int32 ego_idx_y = 103;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(103, this->_internal_ego_idx_y(), target);
  }

  // optional double max_rand_delta_phi = 104;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(104, this->_internal_max_rand_delta_phi(), target);
  }

  // optional double max_ego_future_horizon = 105;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(105, this->_internal_max_ego_future_horizon(), target);
  }

  // optional double max_ego_past_horizon = 106;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(106, this->_internal_max_ego_past_horizon(), target);
  }

  // optional double max_obs_future_horizon = 107;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(107, this->_internal_max_obs_future_horizon(), target);
  }

  // optional double max_obs_past_horizon = 108;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(108, this->_internal_max_obs_past_horizon(), target);
  }

  // optional int32 base_map_padding = 200;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(200, this->_internal_base_map_padding(), target);
  }

  // optional double city_driving_max_speed = 201;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(201, this->_internal_city_driving_max_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlanningSemanticMapConfig)
  return target;
}

size_t PlanningSemanticMapConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlanningSemanticMapConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double resolution = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 base_map_padding = 200;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_base_map_padding());
    }

    // optional int32 height = 100;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_height());
    }

    // optional int32 width = 101;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_width());
    }

    // optional int32 ego_idx_x = 102;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ego_idx_x());
    }

    // optional int32 ego_idx_y = 103;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ego_idx_y());
    }

    // optional double max_rand_delta_phi = 104;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 8;
    }

    // optional double max_ego_future_horizon = 105;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional double max_ego_past_horizon = 106;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 8;
    }

    // optional double max_obs_future_horizon = 107;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 8;
    }

    // optional double max_obs_past_horizon = 108;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 8;
    }

    // optional double city_driving_max_speed = 201;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanningSemanticMapConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PlanningSemanticMapConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningSemanticMapConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlanningSemanticMapConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PlanningSemanticMapConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PlanningSemanticMapConfig)
    MergeFrom(*source);
  }
}

void PlanningSemanticMapConfig::MergeFrom(const PlanningSemanticMapConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlanningSemanticMapConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      resolution_ = from.resolution_;
    }
    if (cached_has_bits & 0x00000002u) {
      base_map_padding_ = from.base_map_padding_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      ego_idx_x_ = from.ego_idx_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      ego_idx_y_ = from.ego_idx_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_rand_delta_phi_ = from.max_rand_delta_phi_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_ego_future_horizon_ = from.max_ego_future_horizon_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      max_ego_past_horizon_ = from.max_ego_past_horizon_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_obs_future_horizon_ = from.max_obs_future_horizon_;
    }
    if (cached_has_bits & 0x00000400u) {
      max_obs_past_horizon_ = from.max_obs_past_horizon_;
    }
    if (cached_has_bits & 0x00000800u) {
      city_driving_max_speed_ = from.city_driving_max_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlanningSemanticMapConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PlanningSemanticMapConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningSemanticMapConfig::CopyFrom(const PlanningSemanticMapConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlanningSemanticMapConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningSemanticMapConfig::IsInitialized() const {
  return true;
}

void PlanningSemanticMapConfig::InternalSwap(PlanningSemanticMapConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlanningSemanticMapConfig, city_driving_max_speed_)
      + sizeof(PlanningSemanticMapConfig::city_driving_max_speed_)
      - PROTOBUF_FIELD_OFFSET(PlanningSemanticMapConfig, resolution_)>(
          reinterpret_cast<char*>(&resolution_),
          reinterpret_cast<char*>(&other->resolution_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningSemanticMapConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::PlanningSemanticMapConfig* Arena::CreateMaybeMessage< ::apollo::planning::PlanningSemanticMapConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PlanningSemanticMapConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
