// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/v2x/proto/v2x_traffic_light_policy.proto

#include "modules/v2x/proto/v2x_traffic_light_policy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Connection_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Intersection_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntersectionState_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Lane_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Map_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Phase_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position2D_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Road_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Spat_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto;
namespace apollo {
namespace v2x {
class Position2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Position2D> _instance;
} _Position2D_default_instance_;
class ConnectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Connection> _instance;
} _Connection_default_instance_;
class LaneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Lane> _instance;
} _Lane_default_instance_;
class RoadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Road> _instance;
} _Road_default_instance_;
class IntersectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Intersection> _instance;
} _Intersection_default_instance_;
class MapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Map> _instance;
} _Map_default_instance_;
class PhaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Phase> _instance;
} _Phase_default_instance_;
class IntersectionStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntersectionState> _instance;
} _IntersectionState_default_instance_;
class SpatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Spat> _instance;
} _Spat_default_instance_;
class PolicyDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PolicyData> _instance;
} _PolicyData_default_instance_;
}  // namespace v2x
}  // namespace apollo
static void InitDefaultsscc_info_Connection_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::v2x::_Connection_default_instance_;
    new (ptr) ::apollo::v2x::Connection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Connection_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Connection_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_Intersection_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::v2x::_Intersection_default_instance_;
    new (ptr) ::apollo::v2x::Intersection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Intersection_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Intersection_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto}, {
      &scc_info_Position2D_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base,
      &scc_info_Road_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base,}};

static void InitDefaultsscc_info_IntersectionState_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::v2x::_IntersectionState_default_instance_;
    new (ptr) ::apollo::v2x::IntersectionState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntersectionState_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IntersectionState_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto}, {
      &scc_info_Phase_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base,}};

static void InitDefaultsscc_info_Lane_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::v2x::_Lane_default_instance_;
    new (ptr) ::apollo::v2x::Lane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Lane_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Lane_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto}, {
      &scc_info_Position2D_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base,
      &scc_info_Connection_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base,}};

static void InitDefaultsscc_info_Map_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::v2x::_Map_default_instance_;
    new (ptr) ::apollo::v2x::Map();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Map_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Map_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto}, {
      &scc_info_Intersection_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base,}};

static void InitDefaultsscc_info_Phase_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::v2x::_Phase_default_instance_;
    new (ptr) ::apollo::v2x::Phase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Phase_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Phase_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_PolicyData_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::v2x::_PolicyData_default_instance_;
    new (ptr) ::apollo::v2x::PolicyData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PolicyData_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PolicyData_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto}, {
      &scc_info_Map_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base,
      &scc_info_Spat_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base,}};

static void InitDefaultsscc_info_Position2D_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::v2x::_Position2D_default_instance_;
    new (ptr) ::apollo::v2x::Position2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position2D_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Position2D_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_Road_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::v2x::_Road_default_instance_;
    new (ptr) ::apollo::v2x::Road();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Road_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Road_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto}, {
      &scc_info_Position2D_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base,
      &scc_info_Lane_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base,}};

static void InitDefaultsscc_info_Spat_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::v2x::_Spat_default_instance_;
    new (ptr) ::apollo::v2x::Spat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Spat_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Spat_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto}, {
      &scc_info_IntersectionState_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Position2D, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Position2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Position2D, x_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Position2D, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Connection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Connection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Connection, allow_driving_behavior_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Connection, phase_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Lane, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Lane, lane_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Lane, position_offset_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Lane, connections_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Road, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Road, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Road, upstream_node_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Road, points_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Road, lanes_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Intersection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Intersection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Intersection, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Intersection, position_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Intersection, roads_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Map, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Map, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Map, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Map, msg_cnt_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Map, intersections_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Phase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Phase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Phase, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Phase, color_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Phase, color_remaining_time_s_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::IntersectionState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::IntersectionState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::IntersectionState, intersection_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::IntersectionState, phases_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::IntersectionState, moy_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::IntersectionState, time_stamp_dsecond_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Spat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Spat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Spat, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Spat, msg_cnt_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::Spat, intersections_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::PolicyData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::PolicyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::PolicyData, map_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::PolicyData, spat_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::apollo::v2x::Position2D)},
  { 9, 16, sizeof(::apollo::v2x::Connection)},
  { 18, 26, sizeof(::apollo::v2x::Lane)},
  { 29, 37, sizeof(::apollo::v2x::Road)},
  { 40, 48, sizeof(::apollo::v2x::Intersection)},
  { 51, 59, sizeof(::apollo::v2x::Map)},
  { 62, 70, sizeof(::apollo::v2x::Phase)},
  { 73, 82, sizeof(::apollo::v2x::IntersectionState)},
  { 86, 94, sizeof(::apollo::v2x::Spat)},
  { 97, 104, sizeof(::apollo::v2x::PolicyData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::v2x::_Position2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::v2x::_Connection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::v2x::_Lane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::v2x::_Road_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::v2x::_Intersection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::v2x::_Map_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::v2x::_Phase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::v2x::_IntersectionState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::v2x::_Spat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::v2x::_PolicyData_default_instance_),
};

const char descriptor_table_protodef_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n0modules/v2x/proto/v2x_traffic_light_po"
  "licy.proto\022\napollo.v2x\"\"\n\nPosition2D\022\t\n\001"
  "x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\"\222\001\n\nConnection\022;\n\026all"
  "ow_driving_behavior\030\001 \001(\0162\033.apollo.v2x.C"
  "onnection.Type\022\020\n\010phase_id\030\002 \001(\005\"5\n\004Type"
  "\022\014\n\010STRAIGHT\020\000\022\010\n\004LEFT\020\001\022\t\n\005RIGHT\020\002\022\n\n\006U"
  "_TURN\020\003\"u\n\004Lane\022\017\n\007lane_id\030\001 \001(\005\022/\n\017posi"
  "tion_offset\030\002 \003(\0132\026.apollo.v2x.Position2"
  "D\022+\n\013connections\030\003 \003(\0132\026.apollo.v2x.Conn"
  "ection\"i\n\004Road\022\030\n\020upstream_node_id\030\001 \001(\005"
  "\022&\n\006points\030\002 \001(\0132\026.apollo.v2x.Position2D"
  "\022\037\n\005lanes\030\003 \003(\0132\020.apollo.v2x.Lane\"e\n\014Int"
  "ersection\022\n\n\002id\030\001 \001(\005\022(\n\010position\030\002 \001(\0132"
  "\026.apollo.v2x.Position2D\022\037\n\005roads\030\003 \003(\0132\020"
  ".apollo.v2x.Road\"[\n\003Map\022\022\n\ntime_stamp\030\001 "
  "\001(\001\022\017\n\007msg_cnt\030\002 \001(\005\022/\n\rintersections\030\003 "
  "\003(\0132\030.apollo.v2x.Intersection\"\255\001\n\005Phase\022"
  "\n\n\002id\030\001 \001(\005\022&\n\005color\030\002 \001(\0162\027.apollo.v2x."
  "Phase.Color\022\036\n\026color_remaining_time_s\030\003 "
  "\001(\005\"P\n\005Color\022\013\n\007UNKNOWN\020\000\022\007\n\003RED\020\001\022\n\n\006YE"
  "LLOW\020\002\022\t\n\005GREEN\020\003\022\t\n\005BLACK\020\004\022\017\n\013FLASH_GR"
  "EEN\020\005\"x\n\021IntersectionState\022\027\n\017intersecti"
  "on_id\030\001 \001(\005\022!\n\006Phases\030\002 \003(\0132\021.apollo.v2x"
  ".Phase\022\013\n\003moy\030\003 \001(\005\022\032\n\022time_stamp_dsecon"
  "d\030\004 \001(\005\"a\n\004Spat\022\022\n\ntime_stamp\030\001 \001(\001\022\017\n\007m"
  "sg_cnt\030\002 \001(\005\0224\n\rintersections\030\003 \003(\0132\035.ap"
  "ollo.v2x.IntersectionState\"J\n\nPolicyData"
  "\022\034\n\003map\030\001 \001(\0132\017.apollo.v2x.Map\022\036\n\004spat\030\002"
  " \001(\0132\020.apollo.v2x.Spat"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto_sccs[10] = {
  &scc_info_Connection_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base,
  &scc_info_Intersection_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base,
  &scc_info_IntersectionState_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base,
  &scc_info_Lane_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base,
  &scc_info_Map_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base,
  &scc_info_Phase_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base,
  &scc_info_PolicyData_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base,
  &scc_info_Position2D_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base,
  &scc_info_Road_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base,
  &scc_info_Spat_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto = {
  false, false, descriptor_table_protodef_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto, "modules/v2x/proto/v2x_traffic_light_policy.proto", 1142,
  &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto_once, descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto_sccs, descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto::offsets,
  file_level_metadata_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto, 10, file_level_enum_descriptors_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto, file_level_service_descriptors_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto)), true);
namespace apollo {
namespace v2x {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Connection_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto);
  return file_level_enum_descriptors_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto[0];
}
bool Connection_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Connection_Type Connection::STRAIGHT;
constexpr Connection_Type Connection::LEFT;
constexpr Connection_Type Connection::RIGHT;
constexpr Connection_Type Connection::U_TURN;
constexpr Connection_Type Connection::Type_MIN;
constexpr Connection_Type Connection::Type_MAX;
constexpr int Connection::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Phase_Color_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto);
  return file_level_enum_descriptors_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto[1];
}
bool Phase_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Phase_Color Phase::UNKNOWN;
constexpr Phase_Color Phase::RED;
constexpr Phase_Color Phase::YELLOW;
constexpr Phase_Color Phase::GREEN;
constexpr Phase_Color Phase::BLACK;
constexpr Phase_Color Phase::FLASH_GREEN;
constexpr Phase_Color Phase::Color_MIN;
constexpr Phase_Color Phase::Color_MAX;
constexpr int Phase::Color_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Position2D::_Internal {
 public:
  using HasBits = decltype(std::declval<Position2D>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Position2D::Position2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.Position2D)
}
Position2D::Position2D(const Position2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.Position2D)
}

void Position2D::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Position2D::~Position2D() {
  // @@protoc_insertion_point(destructor:apollo.v2x.Position2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Position2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Position2D::ArenaDtor(void* object) {
  Position2D* _this = reinterpret_cast< Position2D* >(object);
  (void)_this;
}
void Position2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Position2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Position2D& Position2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Position2D_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void Position2D::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.Position2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Position2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.Position2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.Position2D)
  return target;
}

size_t Position2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.Position2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.v2x.Position2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Position2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Position2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.v2x.Position2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.v2x.Position2D)
    MergeFrom(*source);
  }
}

void Position2D::MergeFrom(const Position2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.Position2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Position2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.v2x.Position2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position2D::CopyFrom(const Position2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.Position2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position2D::IsInitialized() const {
  return true;
}

void Position2D::InternalSwap(Position2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position2D, y_)
      + sizeof(Position2D::y_)
      - PROTOBUF_FIELD_OFFSET(Position2D, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Connection::_Internal {
 public:
  using HasBits = decltype(std::declval<Connection>()._has_bits_);
  static void set_has_allow_driving_behavior(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_phase_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Connection::Connection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.Connection)
}
Connection::Connection(const Connection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&allow_driving_behavior_, &from.allow_driving_behavior_,
    static_cast<size_t>(reinterpret_cast<char*>(&phase_id_) -
    reinterpret_cast<char*>(&allow_driving_behavior_)) + sizeof(phase_id_));
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.Connection)
}

void Connection::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&allow_driving_behavior_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&phase_id_) -
      reinterpret_cast<char*>(&allow_driving_behavior_)) + sizeof(phase_id_));
}

Connection::~Connection() {
  // @@protoc_insertion_point(destructor:apollo.v2x.Connection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Connection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Connection::ArenaDtor(void* object) {
  Connection* _this = reinterpret_cast< Connection* >(object);
  (void)_this;
}
void Connection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Connection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Connection& Connection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Connection_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void Connection::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.Connection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&allow_driving_behavior_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&phase_id_) -
        reinterpret_cast<char*>(&allow_driving_behavior_)) + sizeof(phase_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Connection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.v2x.Connection.Type allow_driving_behavior = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::v2x::Connection_Type_IsValid(val))) {
            _internal_set_allow_driving_behavior(static_cast<::apollo::v2x::Connection_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 phase_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_phase_id(&has_bits);
          phase_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Connection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.Connection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.v2x.Connection.Type allow_driving_behavior = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_allow_driving_behavior(), target);
  }

  // optional int32 phase_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_phase_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.Connection)
  return target;
}

size_t Connection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.Connection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.v2x.Connection.Type allow_driving_behavior = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_allow_driving_behavior());
    }

    // optional int32 phase_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_phase_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Connection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.v2x.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  const Connection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Connection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.v2x.Connection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.v2x.Connection)
    MergeFrom(*source);
  }
}

void Connection::MergeFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      allow_driving_behavior_ = from.allow_driving_behavior_;
    }
    if (cached_has_bits & 0x00000002u) {
      phase_id_ = from.phase_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Connection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.v2x.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Connection::CopyFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connection::IsInitialized() const {
  return true;
}

void Connection::InternalSwap(Connection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Connection, phase_id_)
      + sizeof(Connection::phase_id_)
      - PROTOBUF_FIELD_OFFSET(Connection, allow_driving_behavior_)>(
          reinterpret_cast<char*>(&allow_driving_behavior_),
          reinterpret_cast<char*>(&other->allow_driving_behavior_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Connection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Lane::_Internal {
 public:
  using HasBits = decltype(std::declval<Lane>()._has_bits_);
  static void set_has_lane_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Lane::Lane(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  position_offset_(arena),
  connections_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.Lane)
}
Lane::Lane(const Lane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      position_offset_(from.position_offset_),
      connections_(from.connections_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lane_id_ = from.lane_id_;
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.Lane)
}

void Lane::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Lane_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base);
  lane_id_ = 0;
}

Lane::~Lane() {
  // @@protoc_insertion_point(destructor:apollo.v2x.Lane)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Lane::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Lane::ArenaDtor(void* object) {
  Lane* _this = reinterpret_cast< Lane* >(object);
  (void)_this;
}
void Lane::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Lane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Lane& Lane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Lane_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.Lane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_offset_.Clear();
  connections_.Clear();
  lane_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lane_id(&has_bits);
          lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.v2x.Position2D position_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_position_offset(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.v2x.Connection connections = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_connections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Lane::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.Lane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_lane_id(), target);
  }

  // repeated .apollo.v2x.Position2D position_offset = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_position_offset_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_position_offset(i), target, stream);
  }

  // repeated .apollo.v2x.Connection connections = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_connections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_connections(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.Lane)
  return target;
}

size_t Lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.Lane)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.v2x.Position2D position_offset = 2;
  total_size += 1UL * this->_internal_position_offset_size();
  for (const auto& msg : this->position_offset_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.v2x.Connection connections = 3;
  total_size += 1UL * this->_internal_connections_size();
  for (const auto& msg : this->connections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 lane_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.v2x.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  const Lane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Lane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.v2x.Lane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.v2x.Lane)
    MergeFrom(*source);
  }
}

void Lane::MergeFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_offset_.MergeFrom(from.position_offset_);
  connections_.MergeFrom(from.connections_);
  if (from._internal_has_lane_id()) {
    _internal_set_lane_id(from._internal_lane_id());
  }
}

void Lane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.v2x.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lane::CopyFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane::IsInitialized() const {
  return true;
}

void Lane::InternalSwap(Lane* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  position_offset_.InternalSwap(&other->position_offset_);
  connections_.InternalSwap(&other->connections_);
  swap(lane_id_, other->lane_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Lane::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Road::_Internal {
 public:
  using HasBits = decltype(std::declval<Road>()._has_bits_);
  static void set_has_upstream_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::v2x::Position2D& points(const Road* msg);
  static void set_has_points(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::v2x::Position2D&
Road::_Internal::points(const Road* msg) {
  return *msg->points_;
}
Road::Road(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lanes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.Road)
}
Road::Road(const Road& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      lanes_(from.lanes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_points()) {
    points_ = new ::apollo::v2x::Position2D(*from.points_);
  } else {
    points_ = nullptr;
  }
  upstream_node_id_ = from.upstream_node_id_;
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.Road)
}

void Road::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Road_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&points_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&upstream_node_id_) -
      reinterpret_cast<char*>(&points_)) + sizeof(upstream_node_id_));
}

Road::~Road() {
  // @@protoc_insertion_point(destructor:apollo.v2x.Road)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Road::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete points_;
}

void Road::ArenaDtor(void* object) {
  Road* _this = reinterpret_cast< Road* >(object);
  (void)_this;
}
void Road::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Road::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Road& Road::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Road_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void Road::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.Road)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lanes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(points_ != nullptr);
    points_->Clear();
  }
  upstream_node_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Road::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 upstream_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_upstream_node_id(&has_bits);
          upstream_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.v2x.Position2D points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_points(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.v2x.Lane lanes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lanes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Road::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.Road)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 upstream_node_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_upstream_node_id(), target);
  }

  // optional .apollo.v2x.Position2D points = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::points(this), target, stream);
  }

  // repeated .apollo.v2x.Lane lanes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lanes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_lanes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.Road)
  return target;
}

size_t Road::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.Road)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.v2x.Lane lanes = 3;
  total_size += 1UL * this->_internal_lanes_size();
  for (const auto& msg : this->lanes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.v2x.Position2D points = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *points_);
    }

    // optional int32 upstream_node_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_upstream_node_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Road::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.v2x.Road)
  GOOGLE_DCHECK_NE(&from, this);
  const Road* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Road>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.v2x.Road)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.v2x.Road)
    MergeFrom(*source);
  }
}

void Road::MergeFrom(const Road& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.Road)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lanes_.MergeFrom(from.lanes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_points()->::apollo::v2x::Position2D::MergeFrom(from._internal_points());
    }
    if (cached_has_bits & 0x00000002u) {
      upstream_node_id_ = from.upstream_node_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Road::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.v2x.Road)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Road::CopyFrom(const Road& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.Road)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Road::IsInitialized() const {
  return true;
}

void Road::InternalSwap(Road* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lanes_.InternalSwap(&other->lanes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Road, upstream_node_id_)
      + sizeof(Road::upstream_node_id_)
      - PROTOBUF_FIELD_OFFSET(Road, points_)>(
          reinterpret_cast<char*>(&points_),
          reinterpret_cast<char*>(&other->points_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Road::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Intersection::_Internal {
 public:
  using HasBits = decltype(std::declval<Intersection>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::v2x::Position2D& position(const Intersection* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::v2x::Position2D&
Intersection::_Internal::position(const Intersection* msg) {
  return *msg->position_;
}
Intersection::Intersection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  roads_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.Intersection)
}
Intersection::Intersection(const Intersection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      roads_(from.roads_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::apollo::v2x::Position2D(*from.position_);
  } else {
    position_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.Intersection)
}

void Intersection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Intersection_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&position_)) + sizeof(id_));
}

Intersection::~Intersection() {
  // @@protoc_insertion_point(destructor:apollo.v2x.Intersection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Intersection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void Intersection::ArenaDtor(void* object) {
  Intersection* _this = reinterpret_cast< Intersection* >(object);
  (void)_this;
}
void Intersection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Intersection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Intersection& Intersection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Intersection_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void Intersection::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.Intersection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roads_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(position_ != nullptr);
    position_->Clear();
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Intersection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.v2x.Position2D position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.v2x.Road roads = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roads(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Intersection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.Intersection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional .apollo.v2x.Position2D position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // repeated .apollo.v2x.Road roads = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roads_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_roads(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.Intersection)
  return target;
}

size_t Intersection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.Intersection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.v2x.Road roads = 3;
  total_size += 1UL * this->_internal_roads_size();
  for (const auto& msg : this->roads_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.v2x.Position2D position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Intersection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.v2x.Intersection)
  GOOGLE_DCHECK_NE(&from, this);
  const Intersection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Intersection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.v2x.Intersection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.v2x.Intersection)
    MergeFrom(*source);
  }
}

void Intersection::MergeFrom(const Intersection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.Intersection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roads_.MergeFrom(from.roads_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::apollo::v2x::Position2D::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Intersection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.v2x.Intersection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Intersection::CopyFrom(const Intersection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.Intersection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Intersection::IsInitialized() const {
  return true;
}

void Intersection::InternalSwap(Intersection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  roads_.InternalSwap(&other->roads_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Intersection, id_)
      + sizeof(Intersection::id_)
      - PROTOBUF_FIELD_OFFSET(Intersection, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Intersection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Map::_Internal {
 public:
  using HasBits = decltype(std::declval<Map>()._has_bits_);
  static void set_has_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_msg_cnt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Map::Map(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  intersections_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.Map)
}
Map::Map(const Map& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      intersections_(from.intersections_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_stamp_, &from.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_cnt_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(msg_cnt_));
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.Map)
}

void Map::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Map_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&time_stamp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&msg_cnt_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(msg_cnt_));
}

Map::~Map() {
  // @@protoc_insertion_point(destructor:apollo.v2x.Map)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Map::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Map::ArenaDtor(void* object) {
  Map* _this = reinterpret_cast< Map* >(object);
  (void)_this;
}
void Map::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Map::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Map& Map::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Map_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void Map::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.Map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intersections_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&time_stamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&msg_cnt_) -
        reinterpret_cast<char*>(&time_stamp_)) + sizeof(msg_cnt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Map::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double time_stamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_time_stamp(&has_bits);
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 msg_cnt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_msg_cnt(&has_bits);
          msg_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.v2x.Intersection intersections = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_intersections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Map::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.Map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double time_stamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_time_stamp(), target);
  }

  // optional int32 msg_cnt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_msg_cnt(), target);
  }

  // repeated .apollo.v2x.Intersection intersections = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_intersections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_intersections(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.Map)
  return target;
}

size_t Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.Map)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.v2x.Intersection intersections = 3;
  total_size += 1UL * this->_internal_intersections_size();
  for (const auto& msg : this->intersections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double time_stamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 msg_cnt = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_msg_cnt());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Map::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.v2x.Map)
  GOOGLE_DCHECK_NE(&from, this);
  const Map* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Map>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.v2x.Map)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.v2x.Map)
    MergeFrom(*source);
  }
}

void Map::MergeFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.Map)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  intersections_.MergeFrom(from.intersections_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      msg_cnt_ = from.msg_cnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Map::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.v2x.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map::CopyFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map::IsInitialized() const {
  return true;
}

void Map::InternalSwap(Map* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  intersections_.InternalSwap(&other->intersections_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Map, msg_cnt_)
      + sizeof(Map::msg_cnt_)
      - PROTOBUF_FIELD_OFFSET(Map, time_stamp_)>(
          reinterpret_cast<char*>(&time_stamp_),
          reinterpret_cast<char*>(&other->time_stamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Map::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Phase::_Internal {
 public:
  using HasBits = decltype(std::declval<Phase>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_color_remaining_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Phase::Phase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.Phase)
}
Phase::Phase(const Phase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_remaining_time_s_) -
    reinterpret_cast<char*>(&id_)) + sizeof(color_remaining_time_s_));
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.Phase)
}

void Phase::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&color_remaining_time_s_) -
      reinterpret_cast<char*>(&id_)) + sizeof(color_remaining_time_s_));
}

Phase::~Phase() {
  // @@protoc_insertion_point(destructor:apollo.v2x.Phase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Phase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Phase::ArenaDtor(void* object) {
  Phase* _this = reinterpret_cast< Phase* >(object);
  (void)_this;
}
void Phase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Phase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Phase& Phase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Phase_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void Phase::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.Phase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&color_remaining_time_s_) -
        reinterpret_cast<char*>(&id_)) + sizeof(color_remaining_time_s_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Phase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.v2x.Phase.Color color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::v2x::Phase_Color_IsValid(val))) {
            _internal_set_color(static_cast<::apollo::v2x::Phase_Color>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 color_remaining_time_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_color_remaining_time_s(&has_bits);
          color_remaining_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Phase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.Phase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional .apollo.v2x.Phase.Color color = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_color(), target);
  }

  // optional int32 color_remaining_time_s = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_color_remaining_time_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.Phase)
  return target;
}

size_t Phase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.Phase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_id());
    }

    // optional .apollo.v2x.Phase.Color color = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_color());
    }

    // optional int32 color_remaining_time_s = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_color_remaining_time_s());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Phase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.v2x.Phase)
  GOOGLE_DCHECK_NE(&from, this);
  const Phase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Phase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.v2x.Phase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.v2x.Phase)
    MergeFrom(*source);
  }
}

void Phase::MergeFrom(const Phase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.Phase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000004u) {
      color_remaining_time_s_ = from.color_remaining_time_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Phase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.v2x.Phase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Phase::CopyFrom(const Phase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.Phase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Phase::IsInitialized() const {
  return true;
}

void Phase::InternalSwap(Phase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Phase, color_remaining_time_s_)
      + sizeof(Phase::color_remaining_time_s_)
      - PROTOBUF_FIELD_OFFSET(Phase, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Phase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IntersectionState::_Internal {
 public:
  using HasBits = decltype(std::declval<IntersectionState>()._has_bits_);
  static void set_has_intersection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_moy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_stamp_dsecond(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

IntersectionState::IntersectionState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  phases_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.IntersectionState)
}
IntersectionState::IntersectionState(const IntersectionState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      phases_(from.phases_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&intersection_id_, &from.intersection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_stamp_dsecond_) -
    reinterpret_cast<char*>(&intersection_id_)) + sizeof(time_stamp_dsecond_));
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.IntersectionState)
}

void IntersectionState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntersectionState_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&intersection_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&time_stamp_dsecond_) -
      reinterpret_cast<char*>(&intersection_id_)) + sizeof(time_stamp_dsecond_));
}

IntersectionState::~IntersectionState() {
  // @@protoc_insertion_point(destructor:apollo.v2x.IntersectionState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntersectionState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IntersectionState::ArenaDtor(void* object) {
  IntersectionState* _this = reinterpret_cast< IntersectionState* >(object);
  (void)_this;
}
void IntersectionState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntersectionState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntersectionState& IntersectionState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntersectionState_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void IntersectionState::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.IntersectionState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phases_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&intersection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_stamp_dsecond_) -
        reinterpret_cast<char*>(&intersection_id_)) + sizeof(time_stamp_dsecond_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntersectionState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 intersection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_intersection_id(&has_bits);
          intersection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.v2x.Phase Phases = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_phases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 moy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_moy(&has_bits);
          moy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 time_stamp_dsecond = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_time_stamp_dsecond(&has_bits);
          time_stamp_dsecond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntersectionState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.IntersectionState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 intersection_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_intersection_id(), target);
  }

  // repeated .apollo.v2x.Phase Phases = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_phases_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_phases(i), target, stream);
  }

  // optional int32 moy = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_moy(), target);
  }

  // optional int32 time_stamp_dsecond = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_time_stamp_dsecond(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.IntersectionState)
  return target;
}

size_t IntersectionState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.IntersectionState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.v2x.Phase Phases = 2;
  total_size += 1UL * this->_internal_phases_size();
  for (const auto& msg : this->phases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 intersection_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_intersection_id());
    }

    // optional int32 moy = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_moy());
    }

    // optional int32 time_stamp_dsecond = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_time_stamp_dsecond());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntersectionState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.v2x.IntersectionState)
  GOOGLE_DCHECK_NE(&from, this);
  const IntersectionState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntersectionState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.v2x.IntersectionState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.v2x.IntersectionState)
    MergeFrom(*source);
  }
}

void IntersectionState::MergeFrom(const IntersectionState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.IntersectionState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  phases_.MergeFrom(from.phases_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      intersection_id_ = from.intersection_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      moy_ = from.moy_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_stamp_dsecond_ = from.time_stamp_dsecond_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IntersectionState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.v2x.IntersectionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntersectionState::CopyFrom(const IntersectionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.IntersectionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntersectionState::IsInitialized() const {
  return true;
}

void IntersectionState::InternalSwap(IntersectionState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  phases_.InternalSwap(&other->phases_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntersectionState, time_stamp_dsecond_)
      + sizeof(IntersectionState::time_stamp_dsecond_)
      - PROTOBUF_FIELD_OFFSET(IntersectionState, intersection_id_)>(
          reinterpret_cast<char*>(&intersection_id_),
          reinterpret_cast<char*>(&other->intersection_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntersectionState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Spat::_Internal {
 public:
  using HasBits = decltype(std::declval<Spat>()._has_bits_);
  static void set_has_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_msg_cnt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Spat::Spat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  intersections_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.Spat)
}
Spat::Spat(const Spat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      intersections_(from.intersections_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_stamp_, &from.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_cnt_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(msg_cnt_));
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.Spat)
}

void Spat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Spat_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&time_stamp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&msg_cnt_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(msg_cnt_));
}

Spat::~Spat() {
  // @@protoc_insertion_point(destructor:apollo.v2x.Spat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Spat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Spat::ArenaDtor(void* object) {
  Spat* _this = reinterpret_cast< Spat* >(object);
  (void)_this;
}
void Spat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Spat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Spat& Spat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Spat_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void Spat::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.Spat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intersections_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&time_stamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&msg_cnt_) -
        reinterpret_cast<char*>(&time_stamp_)) + sizeof(msg_cnt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Spat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double time_stamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_time_stamp(&has_bits);
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 msg_cnt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_msg_cnt(&has_bits);
          msg_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.v2x.IntersectionState intersections = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_intersections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Spat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.Spat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double time_stamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_time_stamp(), target);
  }

  // optional int32 msg_cnt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_msg_cnt(), target);
  }

  // repeated .apollo.v2x.IntersectionState intersections = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_intersections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_intersections(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.Spat)
  return target;
}

size_t Spat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.Spat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.v2x.IntersectionState intersections = 3;
  total_size += 1UL * this->_internal_intersections_size();
  for (const auto& msg : this->intersections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double time_stamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 msg_cnt = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_msg_cnt());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Spat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.v2x.Spat)
  GOOGLE_DCHECK_NE(&from, this);
  const Spat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Spat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.v2x.Spat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.v2x.Spat)
    MergeFrom(*source);
  }
}

void Spat::MergeFrom(const Spat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.Spat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  intersections_.MergeFrom(from.intersections_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      msg_cnt_ = from.msg_cnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Spat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.v2x.Spat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Spat::CopyFrom(const Spat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.Spat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Spat::IsInitialized() const {
  return true;
}

void Spat::InternalSwap(Spat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  intersections_.InternalSwap(&other->intersections_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Spat, msg_cnt_)
      + sizeof(Spat::msg_cnt_)
      - PROTOBUF_FIELD_OFFSET(Spat, time_stamp_)>(
          reinterpret_cast<char*>(&time_stamp_),
          reinterpret_cast<char*>(&other->time_stamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Spat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PolicyData::_Internal {
 public:
  using HasBits = decltype(std::declval<PolicyData>()._has_bits_);
  static const ::apollo::v2x::Map& map(const PolicyData* msg);
  static void set_has_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::v2x::Spat& spat(const PolicyData* msg);
  static void set_has_spat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::v2x::Map&
PolicyData::_Internal::map(const PolicyData* msg) {
  return *msg->map_;
}
const ::apollo::v2x::Spat&
PolicyData::_Internal::spat(const PolicyData* msg) {
  return *msg->spat_;
}
PolicyData::PolicyData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.PolicyData)
}
PolicyData::PolicyData(const PolicyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_map()) {
    map_ = new ::apollo::v2x::Map(*from.map_);
  } else {
    map_ = nullptr;
  }
  if (from._internal_has_spat()) {
    spat_ = new ::apollo::v2x::Spat(*from.spat_);
  } else {
    spat_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.PolicyData)
}

void PolicyData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PolicyData_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&map_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&spat_) -
      reinterpret_cast<char*>(&map_)) + sizeof(spat_));
}

PolicyData::~PolicyData() {
  // @@protoc_insertion_point(destructor:apollo.v2x.PolicyData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PolicyData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete map_;
  if (this != internal_default_instance()) delete spat_;
}

void PolicyData::ArenaDtor(void* object) {
  PolicyData* _this = reinterpret_cast< PolicyData* >(object);
  (void)_this;
}
void PolicyData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PolicyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PolicyData& PolicyData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PolicyData_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void PolicyData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.PolicyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(map_ != nullptr);
      map_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spat_ != nullptr);
      spat_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolicyData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.v2x.Map map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.v2x.Spat spat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PolicyData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.PolicyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.v2x.Map map = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::map(this), target, stream);
  }

  // optional .apollo.v2x.Spat spat = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spat(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.PolicyData)
  return target;
}

size_t PolicyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.PolicyData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.v2x.Map map = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *map_);
    }

    // optional .apollo.v2x.Spat spat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spat_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolicyData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.v2x.PolicyData)
  GOOGLE_DCHECK_NE(&from, this);
  const PolicyData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PolicyData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.v2x.PolicyData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.v2x.PolicyData)
    MergeFrom(*source);
  }
}

void PolicyData::MergeFrom(const PolicyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.PolicyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_map()->::apollo::v2x::Map::MergeFrom(from._internal_map());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spat()->::apollo::v2x::Spat::MergeFrom(from._internal_spat());
    }
  }
}

void PolicyData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.v2x.PolicyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolicyData::CopyFrom(const PolicyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.PolicyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyData::IsInitialized() const {
  return true;
}

void PolicyData::InternalSwap(PolicyData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PolicyData, spat_)
      + sizeof(PolicyData::spat_)
      - PROTOBUF_FIELD_OFFSET(PolicyData, map_)>(
          reinterpret_cast<char*>(&map_),
          reinterpret_cast<char*>(&other->map_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PolicyData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v2x
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::v2x::Position2D* Arena::CreateMaybeMessage< ::apollo::v2x::Position2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::Position2D >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::Connection* Arena::CreateMaybeMessage< ::apollo::v2x::Connection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::Connection >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::Lane* Arena::CreateMaybeMessage< ::apollo::v2x::Lane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::Lane >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::Road* Arena::CreateMaybeMessage< ::apollo::v2x::Road >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::Road >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::Intersection* Arena::CreateMaybeMessage< ::apollo::v2x::Intersection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::Intersection >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::Map* Arena::CreateMaybeMessage< ::apollo::v2x::Map >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::Map >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::Phase* Arena::CreateMaybeMessage< ::apollo::v2x::Phase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::Phase >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::IntersectionState* Arena::CreateMaybeMessage< ::apollo::v2x::IntersectionState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::IntersectionState >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::Spat* Arena::CreateMaybeMessage< ::apollo::v2x::Spat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::Spat >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::PolicyData* Arena::CreateMaybeMessage< ::apollo::v2x::PolicyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::PolicyData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
