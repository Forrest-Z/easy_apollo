// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/storytelling/proto/story.proto

#include "modules/storytelling/proto/story.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fstorytelling_2fproto_2fstory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloseToClearArea_modules_2fstorytelling_2fproto_2fstory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fstorytelling_2fproto_2fstory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloseToCrosswalk_modules_2fstorytelling_2fproto_2fstory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fstorytelling_2fproto_2fstory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloseToJunction_modules_2fstorytelling_2fproto_2fstory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fstorytelling_2fproto_2fstory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloseToSignal_modules_2fstorytelling_2fproto_2fstory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fstorytelling_2fproto_2fstory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloseToStopSign_modules_2fstorytelling_2fproto_2fstory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fstorytelling_2fproto_2fstory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloseToYieldSign_modules_2fstorytelling_2fproto_2fstory_2eproto;
namespace apollo {
namespace storytelling {
class CloseToCrosswalkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseToCrosswalk> _instance;
} _CloseToCrosswalk_default_instance_;
class CloseToClearAreaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseToClearArea> _instance;
} _CloseToClearArea_default_instance_;
class CloseToJunctionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseToJunction> _instance;
} _CloseToJunction_default_instance_;
class CloseToSignalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseToSignal> _instance;
} _CloseToSignal_default_instance_;
class CloseToStopSignDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseToStopSign> _instance;
} _CloseToStopSign_default_instance_;
class CloseToYieldSignDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseToYieldSign> _instance;
} _CloseToYieldSign_default_instance_;
class StoriesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Stories> _instance;
} _Stories_default_instance_;
}  // namespace storytelling
}  // namespace apollo
static void InitDefaultsscc_info_CloseToClearArea_modules_2fstorytelling_2fproto_2fstory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::storytelling::_CloseToClearArea_default_instance_;
    new (ptr) ::apollo::storytelling::CloseToClearArea();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloseToClearArea_modules_2fstorytelling_2fproto_2fstory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CloseToClearArea_modules_2fstorytelling_2fproto_2fstory_2eproto}, {}};

static void InitDefaultsscc_info_CloseToCrosswalk_modules_2fstorytelling_2fproto_2fstory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::storytelling::_CloseToCrosswalk_default_instance_;
    new (ptr) ::apollo::storytelling::CloseToCrosswalk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloseToCrosswalk_modules_2fstorytelling_2fproto_2fstory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CloseToCrosswalk_modules_2fstorytelling_2fproto_2fstory_2eproto}, {}};

static void InitDefaultsscc_info_CloseToJunction_modules_2fstorytelling_2fproto_2fstory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::storytelling::_CloseToJunction_default_instance_;
    new (ptr) ::apollo::storytelling::CloseToJunction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloseToJunction_modules_2fstorytelling_2fproto_2fstory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CloseToJunction_modules_2fstorytelling_2fproto_2fstory_2eproto}, {}};

static void InitDefaultsscc_info_CloseToSignal_modules_2fstorytelling_2fproto_2fstory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::storytelling::_CloseToSignal_default_instance_;
    new (ptr) ::apollo::storytelling::CloseToSignal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloseToSignal_modules_2fstorytelling_2fproto_2fstory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CloseToSignal_modules_2fstorytelling_2fproto_2fstory_2eproto}, {}};

static void InitDefaultsscc_info_CloseToStopSign_modules_2fstorytelling_2fproto_2fstory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::storytelling::_CloseToStopSign_default_instance_;
    new (ptr) ::apollo::storytelling::CloseToStopSign();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloseToStopSign_modules_2fstorytelling_2fproto_2fstory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CloseToStopSign_modules_2fstorytelling_2fproto_2fstory_2eproto}, {}};

static void InitDefaultsscc_info_CloseToYieldSign_modules_2fstorytelling_2fproto_2fstory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::storytelling::_CloseToYieldSign_default_instance_;
    new (ptr) ::apollo::storytelling::CloseToYieldSign();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloseToYieldSign_modules_2fstorytelling_2fproto_2fstory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CloseToYieldSign_modules_2fstorytelling_2fproto_2fstory_2eproto}, {}};

static void InitDefaultsscc_info_Stories_modules_2fstorytelling_2fproto_2fstory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::storytelling::_Stories_default_instance_;
    new (ptr) ::apollo::storytelling::Stories();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Stories_modules_2fstorytelling_2fproto_2fstory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_Stories_modules_2fstorytelling_2fproto_2fstory_2eproto}, {
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,
      &scc_info_CloseToClearArea_modules_2fstorytelling_2fproto_2fstory_2eproto.base,
      &scc_info_CloseToCrosswalk_modules_2fstorytelling_2fproto_2fstory_2eproto.base,
      &scc_info_CloseToJunction_modules_2fstorytelling_2fproto_2fstory_2eproto.base,
      &scc_info_CloseToSignal_modules_2fstorytelling_2fproto_2fstory_2eproto.base,
      &scc_info_CloseToStopSign_modules_2fstorytelling_2fproto_2fstory_2eproto.base,
      &scc_info_CloseToYieldSign_modules_2fstorytelling_2fproto_2fstory_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fstorytelling_2fproto_2fstory_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fstorytelling_2fproto_2fstory_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fstorytelling_2fproto_2fstory_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fstorytelling_2fproto_2fstory_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToCrosswalk, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToCrosswalk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToCrosswalk, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToCrosswalk, distance_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToClearArea, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToClearArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToClearArea, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToClearArea, distance_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToJunction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToJunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToJunction, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToJunction, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToJunction, distance_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToSignal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToSignal, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToSignal, distance_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToStopSign, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToStopSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToStopSign, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToStopSign, distance_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToYieldSign, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToYieldSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToYieldSign, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::CloseToYieldSign, distance_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::Stories, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::Stories, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::Stories, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::Stories, close_to_clear_area_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::Stories, close_to_crosswalk_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::Stories, close_to_junction_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::Stories, close_to_signal_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::Stories, close_to_stop_sign_),
  PROTOBUF_FIELD_OFFSET(::apollo::storytelling::Stories, close_to_yield_sign_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::apollo::storytelling::CloseToCrosswalk)},
  { 9, 16, sizeof(::apollo::storytelling::CloseToClearArea)},
  { 18, 26, sizeof(::apollo::storytelling::CloseToJunction)},
  { 29, 36, sizeof(::apollo::storytelling::CloseToSignal)},
  { 38, 45, sizeof(::apollo::storytelling::CloseToStopSign)},
  { 47, 54, sizeof(::apollo::storytelling::CloseToYieldSign)},
  { 56, 68, sizeof(::apollo::storytelling::Stories)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::storytelling::_CloseToCrosswalk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::storytelling::_CloseToClearArea_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::storytelling::_CloseToJunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::storytelling::_CloseToSignal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::storytelling::_CloseToStopSign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::storytelling::_CloseToYieldSign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::storytelling::_Stories_default_instance_),
};

const char descriptor_table_protodef_modules_2fstorytelling_2fproto_2fstory_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&modules/storytelling/proto/story.proto"
  "\022\023apollo.storytelling\032!modules/common/pr"
  "oto/header.proto\"5\n\020CloseToCrosswalk\022\n\n\002"
  "id\030\001 \001(\t\022\025\n\010distance\030\002 \001(\001:\003nan\"5\n\020Close"
  "ToClearArea\022\n\n\002id\030\001 \001(\t\022\025\n\010distance\030\002 \001("
  "\001:\003nan\"\245\001\n\017CloseToJunction\022\n\n\002id\030\001 \001(\t\022\?"
  "\n\004type\030\002 \001(\01621.apollo.storytelling.Close"
  "ToJunction.JunctionType\022\025\n\010distance\030\003 \001("
  "\001:\003nan\".\n\014JunctionType\022\020\n\014PNC_JUNCTION\020\001"
  "\022\014\n\010JUNCTION\020\002\"2\n\rCloseToSignal\022\n\n\002id\030\001 "
  "\001(\t\022\025\n\010distance\030\002 \001(\001:\003nan\"4\n\017CloseToSto"
  "pSign\022\n\n\002id\030\001 \001(\t\022\025\n\010distance\030\002 \001(\001:\003nan"
  "\"5\n\020CloseToYieldSign\022\n\n\002id\030\001 \001(\t\022\025\n\010dist"
  "ance\030\002 \001(\001:\003nan\"\273\003\n\007Stories\022%\n\006header\030\001 "
  "\001(\0132\025.apollo.common.Header\022B\n\023close_to_c"
  "lear_area\030\002 \001(\0132%.apollo.storytelling.Cl"
  "oseToClearArea\022A\n\022close_to_crosswalk\030\003 \001"
  "(\0132%.apollo.storytelling.CloseToCrosswal"
  "k\022\?\n\021close_to_junction\030\004 \001(\0132$.apollo.st"
  "orytelling.CloseToJunction\022;\n\017close_to_s"
  "ignal\030\005 \001(\0132\".apollo.storytelling.CloseT"
  "oSignal\022@\n\022close_to_stop_sign\030\006 \001(\0132$.ap"
  "ollo.storytelling.CloseToStopSign\022B\n\023clo"
  "se_to_yield_sign\030\007 \001(\0132%.apollo.storytel"
  "ling.CloseToYieldSign"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto_deps[1] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto_sccs[7] = {
  &scc_info_CloseToClearArea_modules_2fstorytelling_2fproto_2fstory_2eproto.base,
  &scc_info_CloseToCrosswalk_modules_2fstorytelling_2fproto_2fstory_2eproto.base,
  &scc_info_CloseToJunction_modules_2fstorytelling_2fproto_2fstory_2eproto.base,
  &scc_info_CloseToSignal_modules_2fstorytelling_2fproto_2fstory_2eproto.base,
  &scc_info_CloseToStopSign_modules_2fstorytelling_2fproto_2fstory_2eproto.base,
  &scc_info_CloseToYieldSign_modules_2fstorytelling_2fproto_2fstory_2eproto.base,
  &scc_info_Stories_modules_2fstorytelling_2fproto_2fstory_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto = {
  false, false, descriptor_table_protodef_modules_2fstorytelling_2fproto_2fstory_2eproto, "modules/storytelling/proto/story.proto", 981,
  &descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto_once, descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto_sccs, descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_modules_2fstorytelling_2fproto_2fstory_2eproto::offsets,
  file_level_metadata_modules_2fstorytelling_2fproto_2fstory_2eproto, 7, file_level_enum_descriptors_modules_2fstorytelling_2fproto_2fstory_2eproto, file_level_service_descriptors_modules_2fstorytelling_2fproto_2fstory_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fstorytelling_2fproto_2fstory_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto)), true);
namespace apollo {
namespace storytelling {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CloseToJunction_JunctionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fstorytelling_2fproto_2fstory_2eproto);
  return file_level_enum_descriptors_modules_2fstorytelling_2fproto_2fstory_2eproto[0];
}
bool CloseToJunction_JunctionType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CloseToJunction_JunctionType CloseToJunction::PNC_JUNCTION;
constexpr CloseToJunction_JunctionType CloseToJunction::JUNCTION;
constexpr CloseToJunction_JunctionType CloseToJunction::JunctionType_MIN;
constexpr CloseToJunction_JunctionType CloseToJunction::JunctionType_MAX;
constexpr int CloseToJunction::JunctionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class CloseToCrosswalk::_Internal {
 public:
  using HasBits = decltype(std::declval<CloseToCrosswalk>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CloseToCrosswalk::CloseToCrosswalk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.storytelling.CloseToCrosswalk)
}
CloseToCrosswalk::CloseToCrosswalk(const CloseToCrosswalk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:apollo.storytelling.CloseToCrosswalk)
}

void CloseToCrosswalk::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloseToCrosswalk_modules_2fstorytelling_2fproto_2fstory_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  distance_ = std::numeric_limits<double>::quiet_NaN();
}

CloseToCrosswalk::~CloseToCrosswalk() {
  // @@protoc_insertion_point(destructor:apollo.storytelling.CloseToCrosswalk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CloseToCrosswalk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CloseToCrosswalk::ArenaDtor(void* object) {
  CloseToCrosswalk* _this = reinterpret_cast< CloseToCrosswalk* >(object);
  (void)_this;
}
void CloseToCrosswalk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloseToCrosswalk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseToCrosswalk& CloseToCrosswalk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseToCrosswalk_modules_2fstorytelling_2fproto_2fstory_2eproto.base);
  return *internal_default_instance();
}


void CloseToCrosswalk::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.storytelling.CloseToCrosswalk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    distance_ = std::numeric_limits<double>::quiet_NaN();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseToCrosswalk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.storytelling.CloseToCrosswalk.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double distance = 2 [default = nan];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseToCrosswalk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.storytelling.CloseToCrosswalk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.storytelling.CloseToCrosswalk.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional double distance = 2 [default = nan];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.storytelling.CloseToCrosswalk)
  return target;
}

size_t CloseToCrosswalk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.storytelling.CloseToCrosswalk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional double distance = 2 [default = nan];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseToCrosswalk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.storytelling.CloseToCrosswalk)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseToCrosswalk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseToCrosswalk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.storytelling.CloseToCrosswalk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.storytelling.CloseToCrosswalk)
    MergeFrom(*source);
  }
}

void CloseToCrosswalk::MergeFrom(const CloseToCrosswalk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.storytelling.CloseToCrosswalk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CloseToCrosswalk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.storytelling.CloseToCrosswalk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseToCrosswalk::CopyFrom(const CloseToCrosswalk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.storytelling.CloseToCrosswalk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseToCrosswalk::IsInitialized() const {
  return true;
}

void CloseToCrosswalk::InternalSwap(CloseToCrosswalk* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseToCrosswalk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CloseToClearArea::_Internal {
 public:
  using HasBits = decltype(std::declval<CloseToClearArea>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CloseToClearArea::CloseToClearArea(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.storytelling.CloseToClearArea)
}
CloseToClearArea::CloseToClearArea(const CloseToClearArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:apollo.storytelling.CloseToClearArea)
}

void CloseToClearArea::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloseToClearArea_modules_2fstorytelling_2fproto_2fstory_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  distance_ = std::numeric_limits<double>::quiet_NaN();
}

CloseToClearArea::~CloseToClearArea() {
  // @@protoc_insertion_point(destructor:apollo.storytelling.CloseToClearArea)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CloseToClearArea::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CloseToClearArea::ArenaDtor(void* object) {
  CloseToClearArea* _this = reinterpret_cast< CloseToClearArea* >(object);
  (void)_this;
}
void CloseToClearArea::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloseToClearArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseToClearArea& CloseToClearArea::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseToClearArea_modules_2fstorytelling_2fproto_2fstory_2eproto.base);
  return *internal_default_instance();
}


void CloseToClearArea::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.storytelling.CloseToClearArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    distance_ = std::numeric_limits<double>::quiet_NaN();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseToClearArea::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.storytelling.CloseToClearArea.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double distance = 2 [default = nan];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseToClearArea::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.storytelling.CloseToClearArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.storytelling.CloseToClearArea.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional double distance = 2 [default = nan];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.storytelling.CloseToClearArea)
  return target;
}

size_t CloseToClearArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.storytelling.CloseToClearArea)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional double distance = 2 [default = nan];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseToClearArea::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.storytelling.CloseToClearArea)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseToClearArea* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseToClearArea>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.storytelling.CloseToClearArea)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.storytelling.CloseToClearArea)
    MergeFrom(*source);
  }
}

void CloseToClearArea::MergeFrom(const CloseToClearArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.storytelling.CloseToClearArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CloseToClearArea::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.storytelling.CloseToClearArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseToClearArea::CopyFrom(const CloseToClearArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.storytelling.CloseToClearArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseToClearArea::IsInitialized() const {
  return true;
}

void CloseToClearArea::InternalSwap(CloseToClearArea* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseToClearArea::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CloseToJunction::_Internal {
 public:
  using HasBits = decltype(std::declval<CloseToJunction>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CloseToJunction::CloseToJunction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.storytelling.CloseToJunction)
}
CloseToJunction::CloseToJunction(const CloseToJunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&type_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.storytelling.CloseToJunction)
}

void CloseToJunction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloseToJunction_modules_2fstorytelling_2fproto_2fstory_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  distance_ = std::numeric_limits<double>::quiet_NaN();
}

CloseToJunction::~CloseToJunction() {
  // @@protoc_insertion_point(destructor:apollo.storytelling.CloseToJunction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CloseToJunction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CloseToJunction::ArenaDtor(void* object) {
  CloseToJunction* _this = reinterpret_cast< CloseToJunction* >(object);
  (void)_this;
}
void CloseToJunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloseToJunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseToJunction& CloseToJunction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseToJunction_modules_2fstorytelling_2fproto_2fstory_2eproto.base);
  return *internal_default_instance();
}


void CloseToJunction::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.storytelling.CloseToJunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    type_ = 1;
    distance_ = std::numeric_limits<double>::quiet_NaN();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseToJunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.storytelling.CloseToJunction.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.storytelling.CloseToJunction.JunctionType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::storytelling::CloseToJunction_JunctionType_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::storytelling::CloseToJunction_JunctionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double distance = 3 [default = nan];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseToJunction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.storytelling.CloseToJunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.storytelling.CloseToJunction.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional .apollo.storytelling.CloseToJunction.JunctionType type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional double distance = 3 [default = nan];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.storytelling.CloseToJunction)
  return target;
}

size_t CloseToJunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.storytelling.CloseToJunction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional .apollo.storytelling.CloseToJunction.JunctionType type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional double distance = 3 [default = nan];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseToJunction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.storytelling.CloseToJunction)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseToJunction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseToJunction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.storytelling.CloseToJunction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.storytelling.CloseToJunction)
    MergeFrom(*source);
  }
}

void CloseToJunction::MergeFrom(const CloseToJunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.storytelling.CloseToJunction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CloseToJunction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.storytelling.CloseToJunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseToJunction::CopyFrom(const CloseToJunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.storytelling.CloseToJunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseToJunction::IsInitialized() const {
  return true;
}

void CloseToJunction::InternalSwap(CloseToJunction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseToJunction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CloseToSignal::_Internal {
 public:
  using HasBits = decltype(std::declval<CloseToSignal>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CloseToSignal::CloseToSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.storytelling.CloseToSignal)
}
CloseToSignal::CloseToSignal(const CloseToSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:apollo.storytelling.CloseToSignal)
}

void CloseToSignal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloseToSignal_modules_2fstorytelling_2fproto_2fstory_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  distance_ = std::numeric_limits<double>::quiet_NaN();
}

CloseToSignal::~CloseToSignal() {
  // @@protoc_insertion_point(destructor:apollo.storytelling.CloseToSignal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CloseToSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CloseToSignal::ArenaDtor(void* object) {
  CloseToSignal* _this = reinterpret_cast< CloseToSignal* >(object);
  (void)_this;
}
void CloseToSignal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloseToSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseToSignal& CloseToSignal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseToSignal_modules_2fstorytelling_2fproto_2fstory_2eproto.base);
  return *internal_default_instance();
}


void CloseToSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.storytelling.CloseToSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    distance_ = std::numeric_limits<double>::quiet_NaN();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseToSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.storytelling.CloseToSignal.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double distance = 2 [default = nan];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseToSignal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.storytelling.CloseToSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.storytelling.CloseToSignal.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional double distance = 2 [default = nan];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.storytelling.CloseToSignal)
  return target;
}

size_t CloseToSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.storytelling.CloseToSignal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional double distance = 2 [default = nan];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseToSignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.storytelling.CloseToSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseToSignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseToSignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.storytelling.CloseToSignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.storytelling.CloseToSignal)
    MergeFrom(*source);
  }
}

void CloseToSignal::MergeFrom(const CloseToSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.storytelling.CloseToSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CloseToSignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.storytelling.CloseToSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseToSignal::CopyFrom(const CloseToSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.storytelling.CloseToSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseToSignal::IsInitialized() const {
  return true;
}

void CloseToSignal::InternalSwap(CloseToSignal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseToSignal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CloseToStopSign::_Internal {
 public:
  using HasBits = decltype(std::declval<CloseToStopSign>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CloseToStopSign::CloseToStopSign(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.storytelling.CloseToStopSign)
}
CloseToStopSign::CloseToStopSign(const CloseToStopSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:apollo.storytelling.CloseToStopSign)
}

void CloseToStopSign::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloseToStopSign_modules_2fstorytelling_2fproto_2fstory_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  distance_ = std::numeric_limits<double>::quiet_NaN();
}

CloseToStopSign::~CloseToStopSign() {
  // @@protoc_insertion_point(destructor:apollo.storytelling.CloseToStopSign)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CloseToStopSign::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CloseToStopSign::ArenaDtor(void* object) {
  CloseToStopSign* _this = reinterpret_cast< CloseToStopSign* >(object);
  (void)_this;
}
void CloseToStopSign::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloseToStopSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseToStopSign& CloseToStopSign::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseToStopSign_modules_2fstorytelling_2fproto_2fstory_2eproto.base);
  return *internal_default_instance();
}


void CloseToStopSign::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.storytelling.CloseToStopSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    distance_ = std::numeric_limits<double>::quiet_NaN();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseToStopSign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.storytelling.CloseToStopSign.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double distance = 2 [default = nan];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseToStopSign::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.storytelling.CloseToStopSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.storytelling.CloseToStopSign.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional double distance = 2 [default = nan];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.storytelling.CloseToStopSign)
  return target;
}

size_t CloseToStopSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.storytelling.CloseToStopSign)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional double distance = 2 [default = nan];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseToStopSign::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.storytelling.CloseToStopSign)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseToStopSign* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseToStopSign>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.storytelling.CloseToStopSign)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.storytelling.CloseToStopSign)
    MergeFrom(*source);
  }
}

void CloseToStopSign::MergeFrom(const CloseToStopSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.storytelling.CloseToStopSign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CloseToStopSign::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.storytelling.CloseToStopSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseToStopSign::CopyFrom(const CloseToStopSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.storytelling.CloseToStopSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseToStopSign::IsInitialized() const {
  return true;
}

void CloseToStopSign::InternalSwap(CloseToStopSign* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseToStopSign::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CloseToYieldSign::_Internal {
 public:
  using HasBits = decltype(std::declval<CloseToYieldSign>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CloseToYieldSign::CloseToYieldSign(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.storytelling.CloseToYieldSign)
}
CloseToYieldSign::CloseToYieldSign(const CloseToYieldSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:apollo.storytelling.CloseToYieldSign)
}

void CloseToYieldSign::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloseToYieldSign_modules_2fstorytelling_2fproto_2fstory_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  distance_ = std::numeric_limits<double>::quiet_NaN();
}

CloseToYieldSign::~CloseToYieldSign() {
  // @@protoc_insertion_point(destructor:apollo.storytelling.CloseToYieldSign)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CloseToYieldSign::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CloseToYieldSign::ArenaDtor(void* object) {
  CloseToYieldSign* _this = reinterpret_cast< CloseToYieldSign* >(object);
  (void)_this;
}
void CloseToYieldSign::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloseToYieldSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseToYieldSign& CloseToYieldSign::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseToYieldSign_modules_2fstorytelling_2fproto_2fstory_2eproto.base);
  return *internal_default_instance();
}


void CloseToYieldSign::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.storytelling.CloseToYieldSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    distance_ = std::numeric_limits<double>::quiet_NaN();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseToYieldSign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.storytelling.CloseToYieldSign.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double distance = 2 [default = nan];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseToYieldSign::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.storytelling.CloseToYieldSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.storytelling.CloseToYieldSign.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional double distance = 2 [default = nan];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.storytelling.CloseToYieldSign)
  return target;
}

size_t CloseToYieldSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.storytelling.CloseToYieldSign)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional double distance = 2 [default = nan];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseToYieldSign::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.storytelling.CloseToYieldSign)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseToYieldSign* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseToYieldSign>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.storytelling.CloseToYieldSign)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.storytelling.CloseToYieldSign)
    MergeFrom(*source);
  }
}

void CloseToYieldSign::MergeFrom(const CloseToYieldSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.storytelling.CloseToYieldSign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CloseToYieldSign::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.storytelling.CloseToYieldSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseToYieldSign::CopyFrom(const CloseToYieldSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.storytelling.CloseToYieldSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseToYieldSign::IsInitialized() const {
  return true;
}

void CloseToYieldSign::InternalSwap(CloseToYieldSign* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseToYieldSign::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Stories::_Internal {
 public:
  using HasBits = decltype(std::declval<Stories>()._has_bits_);
  static const ::apollo::common::Header& header(const Stories* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::storytelling::CloseToClearArea& close_to_clear_area(const Stories* msg);
  static void set_has_close_to_clear_area(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::storytelling::CloseToCrosswalk& close_to_crosswalk(const Stories* msg);
  static void set_has_close_to_crosswalk(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::storytelling::CloseToJunction& close_to_junction(const Stories* msg);
  static void set_has_close_to_junction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::storytelling::CloseToSignal& close_to_signal(const Stories* msg);
  static void set_has_close_to_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::storytelling::CloseToStopSign& close_to_stop_sign(const Stories* msg);
  static void set_has_close_to_stop_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::storytelling::CloseToYieldSign& close_to_yield_sign(const Stories* msg);
  static void set_has_close_to_yield_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::apollo::common::Header&
Stories::_Internal::header(const Stories* msg) {
  return *msg->header_;
}
const ::apollo::storytelling::CloseToClearArea&
Stories::_Internal::close_to_clear_area(const Stories* msg) {
  return *msg->close_to_clear_area_;
}
const ::apollo::storytelling::CloseToCrosswalk&
Stories::_Internal::close_to_crosswalk(const Stories* msg) {
  return *msg->close_to_crosswalk_;
}
const ::apollo::storytelling::CloseToJunction&
Stories::_Internal::close_to_junction(const Stories* msg) {
  return *msg->close_to_junction_;
}
const ::apollo::storytelling::CloseToSignal&
Stories::_Internal::close_to_signal(const Stories* msg) {
  return *msg->close_to_signal_;
}
const ::apollo::storytelling::CloseToStopSign&
Stories::_Internal::close_to_stop_sign(const Stories* msg) {
  return *msg->close_to_stop_sign_;
}
const ::apollo::storytelling::CloseToYieldSign&
Stories::_Internal::close_to_yield_sign(const Stories* msg) {
  return *msg->close_to_yield_sign_;
}
void Stories::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Stories::Stories(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.storytelling.Stories)
}
Stories::Stories(const Stories& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_close_to_clear_area()) {
    close_to_clear_area_ = new ::apollo::storytelling::CloseToClearArea(*from.close_to_clear_area_);
  } else {
    close_to_clear_area_ = nullptr;
  }
  if (from._internal_has_close_to_crosswalk()) {
    close_to_crosswalk_ = new ::apollo::storytelling::CloseToCrosswalk(*from.close_to_crosswalk_);
  } else {
    close_to_crosswalk_ = nullptr;
  }
  if (from._internal_has_close_to_junction()) {
    close_to_junction_ = new ::apollo::storytelling::CloseToJunction(*from.close_to_junction_);
  } else {
    close_to_junction_ = nullptr;
  }
  if (from._internal_has_close_to_signal()) {
    close_to_signal_ = new ::apollo::storytelling::CloseToSignal(*from.close_to_signal_);
  } else {
    close_to_signal_ = nullptr;
  }
  if (from._internal_has_close_to_stop_sign()) {
    close_to_stop_sign_ = new ::apollo::storytelling::CloseToStopSign(*from.close_to_stop_sign_);
  } else {
    close_to_stop_sign_ = nullptr;
  }
  if (from._internal_has_close_to_yield_sign()) {
    close_to_yield_sign_ = new ::apollo::storytelling::CloseToYieldSign(*from.close_to_yield_sign_);
  } else {
    close_to_yield_sign_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.storytelling.Stories)
}

void Stories::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Stories_modules_2fstorytelling_2fproto_2fstory_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&close_to_yield_sign_) -
      reinterpret_cast<char*>(&header_)) + sizeof(close_to_yield_sign_));
}

Stories::~Stories() {
  // @@protoc_insertion_point(destructor:apollo.storytelling.Stories)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Stories::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete close_to_clear_area_;
  if (this != internal_default_instance()) delete close_to_crosswalk_;
  if (this != internal_default_instance()) delete close_to_junction_;
  if (this != internal_default_instance()) delete close_to_signal_;
  if (this != internal_default_instance()) delete close_to_stop_sign_;
  if (this != internal_default_instance()) delete close_to_yield_sign_;
}

void Stories::ArenaDtor(void* object) {
  Stories* _this = reinterpret_cast< Stories* >(object);
  (void)_this;
}
void Stories::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Stories::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Stories& Stories::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Stories_modules_2fstorytelling_2fproto_2fstory_2eproto.base);
  return *internal_default_instance();
}


void Stories::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.storytelling.Stories)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(close_to_clear_area_ != nullptr);
      close_to_clear_area_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(close_to_crosswalk_ != nullptr);
      close_to_crosswalk_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(close_to_junction_ != nullptr);
      close_to_junction_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(close_to_signal_ != nullptr);
      close_to_signal_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(close_to_stop_sign_ != nullptr);
      close_to_stop_sign_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(close_to_yield_sign_ != nullptr);
      close_to_yield_sign_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stories::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.storytelling.CloseToClearArea close_to_clear_area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_close_to_clear_area(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.storytelling.CloseToCrosswalk close_to_crosswalk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_close_to_crosswalk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.storytelling.CloseToJunction close_to_junction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_close_to_junction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.storytelling.CloseToSignal close_to_signal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_close_to_signal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.storytelling.CloseToStopSign close_to_stop_sign = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_close_to_stop_sign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.storytelling.CloseToYieldSign close_to_yield_sign = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_close_to_yield_sign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Stories::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.storytelling.Stories)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional .apollo.storytelling.CloseToClearArea close_to_clear_area = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::close_to_clear_area(this), target, stream);
  }

  // optional .apollo.storytelling.CloseToCrosswalk close_to_crosswalk = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::close_to_crosswalk(this), target, stream);
  }

  // optional .apollo.storytelling.CloseToJunction close_to_junction = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::close_to_junction(this), target, stream);
  }

  // optional .apollo.storytelling.CloseToSignal close_to_signal = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::close_to_signal(this), target, stream);
  }

  // optional .apollo.storytelling.CloseToStopSign close_to_stop_sign = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::close_to_stop_sign(this), target, stream);
  }

  // optional .apollo.storytelling.CloseToYieldSign close_to_yield_sign = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::close_to_yield_sign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.storytelling.Stories)
  return target;
}

size_t Stories::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.storytelling.Stories)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.storytelling.CloseToClearArea close_to_clear_area = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *close_to_clear_area_);
    }

    // optional .apollo.storytelling.CloseToCrosswalk close_to_crosswalk = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *close_to_crosswalk_);
    }

    // optional .apollo.storytelling.CloseToJunction close_to_junction = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *close_to_junction_);
    }

    // optional .apollo.storytelling.CloseToSignal close_to_signal = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *close_to_signal_);
    }

    // optional .apollo.storytelling.CloseToStopSign close_to_stop_sign = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *close_to_stop_sign_);
    }

    // optional .apollo.storytelling.CloseToYieldSign close_to_yield_sign = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *close_to_yield_sign_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stories::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.storytelling.Stories)
  GOOGLE_DCHECK_NE(&from, this);
  const Stories* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Stories>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.storytelling.Stories)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.storytelling.Stories)
    MergeFrom(*source);
  }
}

void Stories::MergeFrom(const Stories& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.storytelling.Stories)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_close_to_clear_area()->::apollo::storytelling::CloseToClearArea::MergeFrom(from._internal_close_to_clear_area());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_close_to_crosswalk()->::apollo::storytelling::CloseToCrosswalk::MergeFrom(from._internal_close_to_crosswalk());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_close_to_junction()->::apollo::storytelling::CloseToJunction::MergeFrom(from._internal_close_to_junction());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_close_to_signal()->::apollo::storytelling::CloseToSignal::MergeFrom(from._internal_close_to_signal());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_close_to_stop_sign()->::apollo::storytelling::CloseToStopSign::MergeFrom(from._internal_close_to_stop_sign());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_close_to_yield_sign()->::apollo::storytelling::CloseToYieldSign::MergeFrom(from._internal_close_to_yield_sign());
    }
  }
}

void Stories::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.storytelling.Stories)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stories::CopyFrom(const Stories& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.storytelling.Stories)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stories::IsInitialized() const {
  return true;
}

void Stories::InternalSwap(Stories* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Stories, close_to_yield_sign_)
      + sizeof(Stories::close_to_yield_sign_)
      - PROTOBUF_FIELD_OFFSET(Stories, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Stories::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace storytelling
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::storytelling::CloseToCrosswalk* Arena::CreateMaybeMessage< ::apollo::storytelling::CloseToCrosswalk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::storytelling::CloseToCrosswalk >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::storytelling::CloseToClearArea* Arena::CreateMaybeMessage< ::apollo::storytelling::CloseToClearArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::storytelling::CloseToClearArea >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::storytelling::CloseToJunction* Arena::CreateMaybeMessage< ::apollo::storytelling::CloseToJunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::storytelling::CloseToJunction >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::storytelling::CloseToSignal* Arena::CreateMaybeMessage< ::apollo::storytelling::CloseToSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::storytelling::CloseToSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::storytelling::CloseToStopSign* Arena::CreateMaybeMessage< ::apollo::storytelling::CloseToStopSign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::storytelling::CloseToStopSign >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::storytelling::CloseToYieldSign* Arena::CreateMaybeMessage< ::apollo::storytelling::CloseToYieldSign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::storytelling::CloseToYieldSign >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::storytelling::Stories* Arena::CreateMaybeMessage< ::apollo::storytelling::Stories >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::storytelling::Stories >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
