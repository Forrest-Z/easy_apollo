// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/backend/teleop/proto/daemon_cmd.proto

#include "modules/dreamview/backend/teleop/proto/daemon_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto;
namespace modules {
namespace teleop {
namespace daemon {
class DaemonCmdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DaemonCmd> _instance;
} _DaemonCmd_default_instance_;
}  // namespace daemon
}  // namespace teleop
}  // namespace modules
static void InitDefaultsscc_info_DaemonCmd_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::modules::teleop::daemon::_DaemonCmd_default_instance_;
    new (ptr) ::modules::teleop::daemon::DaemonCmd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DaemonCmd_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DaemonCmd_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto}, {
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::modules::teleop::daemon::DaemonCmd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::daemon::DaemonCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::modules::teleop::daemon::DaemonCmd, header_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::daemon::DaemonCmd, service_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::daemon::DaemonCmd, cmd_),
  2,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::modules::teleop::daemon::DaemonCmd)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::modules::teleop::daemon::_DaemonCmd_default_instance_),
};

const char descriptor_table_protodef_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n7modules/dreamview/backend/teleop/proto"
  "/daemon_cmd.proto\022\025modules.teleop.daemon"
  "\032!modules/common/proto/header.proto\"Y\n\tD"
  "aemonCmd\022%\n\006header\030\001 \001(\0132\025.apollo.common"
  ".Header\022\021\n\007service\030\002 \001(\t:\000\022\022\n\003cmd\030\003 \001(\t:"
  "\005start"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto_deps[1] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto_sccs[1] = {
  &scc_info_DaemonCmd_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto = {
  false, false, descriptor_table_protodef_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto, "modules/dreamview/backend/teleop/proto/daemon_cmd.proto", 206,
  &descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto_once, descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto_sccs, descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto::offsets,
  file_level_metadata_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto, 1, file_level_enum_descriptors_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto, file_level_service_descriptors_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto)), true);
namespace modules {
namespace teleop {
namespace daemon {

// ===================================================================

class DaemonCmd::_Internal {
 public:
  using HasBits = decltype(std::declval<DaemonCmd>()._has_bits_);
  static const ::apollo::common::Header& header(const DaemonCmd* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_service(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::Header&
DaemonCmd::_Internal::header(const DaemonCmd* msg) {
  return *msg->header_;
}
void DaemonCmd::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString DaemonCmd::_i_give_permission_to_break_this_code_default_cmd_{{{"start", 5}}, {nullptr}};
DaemonCmd::DaemonCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:modules.teleop.daemon.DaemonCmd)
}
DaemonCmd::DaemonCmd(const DaemonCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  service_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_service()) {
    service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_service(), 
      GetArena());
  }
  cmd_.UnsafeSetDefault(nullptr);
  if (from._internal_has_cmd()) {
    cmd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_cmd(), 
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:modules.teleop.daemon.DaemonCmd)
}

void DaemonCmd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DaemonCmd_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto.base);
  service_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cmd_.UnsafeSetDefault(nullptr);
  header_ = nullptr;
}

DaemonCmd::~DaemonCmd() {
  // @@protoc_insertion_point(destructor:modules.teleop.daemon.DaemonCmd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DaemonCmd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  service_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cmd_.DestroyNoArena(nullptr);
  if (this != internal_default_instance()) delete header_;
}

void DaemonCmd::ArenaDtor(void* object) {
  DaemonCmd* _this = reinterpret_cast< DaemonCmd* >(object);
  (void)_this;
}
void DaemonCmd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DaemonCmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DaemonCmd& DaemonCmd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DaemonCmd_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fdaemon_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void DaemonCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:modules.teleop.daemon.DaemonCmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      service_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      cmd_.ClearToDefault(::modules::teleop::daemon::DaemonCmd::_i_give_permission_to_break_this_code_default_cmd_, GetArena());
       }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DaemonCmd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string service = 2 [default = ""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_service();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "modules.teleop.daemon.DaemonCmd.service");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cmd = 3 [default = "start"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_cmd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "modules.teleop.daemon.DaemonCmd.cmd");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DaemonCmd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:modules.teleop.daemon.DaemonCmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional string service = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_service().data(), static_cast<int>(this->_internal_service().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "modules.teleop.daemon.DaemonCmd.service");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_service(), target);
  }

  // optional string cmd = 3 [default = "start"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cmd().data(), static_cast<int>(this->_internal_cmd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "modules.teleop.daemon.DaemonCmd.cmd");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:modules.teleop.daemon.DaemonCmd)
  return target;
}

size_t DaemonCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:modules.teleop.daemon.DaemonCmd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string service = 2 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_service());
    }

    // optional string cmd = 3 [default = "start"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cmd());
    }

    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DaemonCmd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:modules.teleop.daemon.DaemonCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const DaemonCmd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DaemonCmd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:modules.teleop.daemon.DaemonCmd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:modules.teleop.daemon.DaemonCmd)
    MergeFrom(*source);
  }
}

void DaemonCmd::MergeFrom(const DaemonCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:modules.teleop.daemon.DaemonCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_service(from._internal_service());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_cmd(from._internal_cmd());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
  }
}

void DaemonCmd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:modules.teleop.daemon.DaemonCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DaemonCmd::CopyFrom(const DaemonCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:modules.teleop.daemon.DaemonCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DaemonCmd::IsInitialized() const {
  return true;
}

void DaemonCmd::InternalSwap(DaemonCmd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  service_.Swap(&other->service_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cmd_.Swap(&other->cmd_, nullptr, GetArena());
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DaemonCmd::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace daemon
}  // namespace teleop
}  // namespace modules
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::modules::teleop::daemon::DaemonCmd* Arena::CreateMaybeMessage< ::modules::teleop::daemon::DaemonCmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::modules::teleop::daemon::DaemonCmd >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
