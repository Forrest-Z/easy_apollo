// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/backend/teleop/proto/modem_info.proto

#include "modules/dreamview/backend/teleop/proto/modem_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto;
namespace modules {
namespace teleop {
namespace modem {
class ModemInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModemInfo> _instance;
} _ModemInfo_default_instance_;
}  // namespace modem
}  // namespace teleop
}  // namespace modules
static void InitDefaultsscc_info_ModemInfo_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::modules::teleop::modem::_ModemInfo_default_instance_;
    new (ptr) ::modules::teleop::modem::ModemInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModemInfo_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModemInfo_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto}, {
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, header_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, provider_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, ip_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, ip_count_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, gateway_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, port_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, dev_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, tx_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, rx_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, ping_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, smoni_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, technology_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, connection_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, signal_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, quality_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, bandwidth_ul_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, bandwidth_dl_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, ca_aggregation_),
  PROTOBUF_FIELD_OFFSET(::modules::teleop::modem::ModemInfo, rank_),
  9,
  0,
  1,
  12,
  2,
  3,
  4,
  10,
  11,
  5,
  6,
  7,
  8,
  13,
  14,
  15,
  16,
  17,
  18,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 24, sizeof(::modules::teleop::modem::ModemInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::modules::teleop::modem::_ModemInfo_default_instance_),
};

const char descriptor_table_protodef_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n7modules/dreamview/backend/teleop/proto"
  "/modem_info.proto\022\024modules.teleop.modem\032"
  "!modules/common/proto/header.proto\"\336\002\n\tM"
  "odemInfo\022%\n\006header\030\001 \001(\0132\025.apollo.common"
  ".Header\022\020\n\010provider\030\002 \001(\t\022\n\n\002ip\030\003 \001(\t\022\020\n"
  "\010ip_count\030\004 \001(\005\022\017\n\007gateway\030\005 \001(\t\022\014\n\004port"
  "\030\006 \001(\t\022\013\n\003dev\030\007 \001(\t\022\n\n\002tx\030\010 \001(\004\022\n\n\002rx\030\t "
  "\001(\004\022\014\n\004ping\030\n \001(\t\022\r\n\005smoni\030\013 \001(\t\022\022\n\ntech"
  "nology\030\014 \001(\t\022\022\n\nconnection\030\r \001(\t\022\016\n\006sign"
  "al\030\016 \001(\005\022\017\n\007quality\030\017 \001(\005\022\024\n\014bandwidth_u"
  "l\030\020 \001(\005\022\024\n\014bandwidth_dl\030\021 \001(\005\022\026\n\016ca_aggr"
  "egation\030\022 \001(\010\022\014\n\004rank\030\023 \001(\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto_deps[1] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto_sccs[1] = {
  &scc_info_ModemInfo_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto = {
  false, false, descriptor_table_protodef_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto, "modules/dreamview/backend/teleop/proto/modem_info.proto", 467,
  &descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto_once, descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto_sccs, descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto::offsets,
  file_level_metadata_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto, 1, file_level_enum_descriptors_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto, file_level_service_descriptors_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto)), true);
namespace modules {
namespace teleop {
namespace modem {

// ===================================================================

class ModemInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ModemInfo>()._has_bits_);
  static const ::apollo::common::Header& header(const ModemInfo* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_provider(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ip_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_gateway(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_rx(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_smoni(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_technology(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_connection(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_bandwidth_ul(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_bandwidth_dl(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_ca_aggregation(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

const ::apollo::common::Header&
ModemInfo::_Internal::header(const ModemInfo* msg) {
  return *msg->header_;
}
void ModemInfo::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
ModemInfo::ModemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:modules.teleop.modem.ModemInfo)
}
ModemInfo::ModemInfo(const ModemInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_provider()) {
    provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_provider(), 
      GetArena());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ip()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArena());
  }
  gateway_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gateway()) {
    gateway_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gateway(), 
      GetArena());
  }
  port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_port()) {
    port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_port(), 
      GetArena());
  }
  dev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dev()) {
    dev_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dev(), 
      GetArena());
  }
  ping_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ping()) {
    ping_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ping(), 
      GetArena());
  }
  smoni_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_smoni()) {
    smoni_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_smoni(), 
      GetArena());
  }
  technology_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_technology()) {
    technology_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_technology(), 
      GetArena());
  }
  connection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_connection()) {
    connection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_connection(), 
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&tx_, &from.tx_,
    static_cast<size_t>(reinterpret_cast<char*>(&rank_) -
    reinterpret_cast<char*>(&tx_)) + sizeof(rank_));
  // @@protoc_insertion_point(copy_constructor:modules.teleop.modem.ModemInfo)
}

void ModemInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModemInfo_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto.base);
  provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gateway_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ping_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  smoni_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  technology_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  connection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&header_)) + sizeof(rank_));
}

ModemInfo::~ModemInfo() {
  // @@protoc_insertion_point(destructor:modules.teleop.modem.ModemInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModemInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  provider_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gateway_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dev_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ping_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  smoni_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  technology_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  connection_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void ModemInfo::ArenaDtor(void* object) {
  ModemInfo* _this = reinterpret_cast< ModemInfo* >(object);
  (void)_this;
}
void ModemInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModemInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModemInfo& ModemInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModemInfo_modules_2fdreamview_2fbackend_2fteleop_2fproto_2fmodem_5finfo_2eproto.base);
  return *internal_default_instance();
}


void ModemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:modules.teleop.modem.ModemInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      provider_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      gateway_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      port_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      dev_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      ping_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      smoni_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      technology_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      connection_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&tx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bandwidth_ul_) -
        reinterpret_cast<char*>(&tx_)) + sizeof(bandwidth_ul_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&bandwidth_dl_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rank_) -
        reinterpret_cast<char*>(&bandwidth_dl_)) + sizeof(rank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModemInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string provider = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_provider();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "modules.teleop.modem.ModemInfo.provider");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "modules.teleop.modem.ModemInfo.ip");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ip_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ip_count(&has_bits);
          ip_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string gateway = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_gateway();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "modules.teleop.modem.ModemInfo.gateway");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string port = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_port();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "modules.teleop.modem.ModemInfo.port");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string dev = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_dev();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "modules.teleop.modem.ModemInfo.dev");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 tx = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_tx(&has_bits);
          tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 rx = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_rx(&has_bits);
          rx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ping = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_ping();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "modules.teleop.modem.ModemInfo.ping");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string smoni = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_smoni();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "modules.teleop.modem.ModemInfo.smoni");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string technology = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_technology();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "modules.teleop.modem.ModemInfo.technology");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string connection = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_connection();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "modules.teleop.modem.ModemInfo.connection");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 signal = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_signal(&has_bits);
          signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 quality = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_quality(&has_bits);
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bandwidth_ul = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_bandwidth_ul(&has_bits);
          bandwidth_ul_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bandwidth_dl = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_bandwidth_dl(&has_bits);
          bandwidth_dl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ca_aggregation = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_ca_aggregation(&has_bits);
          ca_aggregation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rank = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_rank(&has_bits);
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModemInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:modules.teleop.modem.ModemInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional string provider = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_provider().data(), static_cast<int>(this->_internal_provider().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "modules.teleop.modem.ModemInfo.provider");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_provider(), target);
  }

  // optional string ip = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "modules.teleop.modem.ModemInfo.ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // optional int32 ip_count = 4;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ip_count(), target);
  }

  // optional string gateway = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gateway().data(), static_cast<int>(this->_internal_gateway().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "modules.teleop.modem.ModemInfo.gateway");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_gateway(), target);
  }

  // optional string port = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_port().data(), static_cast<int>(this->_internal_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "modules.teleop.modem.ModemInfo.port");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_port(), target);
  }

  // optional string dev = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dev().data(), static_cast<int>(this->_internal_dev().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "modules.teleop.modem.ModemInfo.dev");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_dev(), target);
  }

  // optional uint64 tx = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_tx(), target);
  }

  // optional uint64 rx = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_rx(), target);
  }

  // optional string ping = 10;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ping().data(), static_cast<int>(this->_internal_ping().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "modules.teleop.modem.ModemInfo.ping");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_ping(), target);
  }

  // optional string smoni = 11;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_smoni().data(), static_cast<int>(this->_internal_smoni().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "modules.teleop.modem.ModemInfo.smoni");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_smoni(), target);
  }

  // optional string technology = 12;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_technology().data(), static_cast<int>(this->_internal_technology().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "modules.teleop.modem.ModemInfo.technology");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_technology(), target);
  }

  // optional string connection = 13;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_connection().data(), static_cast<int>(this->_internal_connection().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "modules.teleop.modem.ModemInfo.connection");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_connection(), target);
  }

  // optional int32 signal = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_signal(), target);
  }

  // optional int32 quality = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_quality(), target);
  }

  // optional int32 bandwidth_ul = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_bandwidth_ul(), target);
  }

  // optional int32 bandwidth_dl = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_bandwidth_dl(), target);
  }

  // optional bool ca_aggregation = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_ca_aggregation(), target);
  }

  // optional int32 rank = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:modules.teleop.modem.ModemInfo)
  return target;
}

size_t ModemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:modules.teleop.modem.ModemInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string provider = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_provider());
    }

    // optional string ip = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ip());
    }

    // optional string gateway = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gateway());
    }

    // optional string port = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_port());
    }

    // optional string dev = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dev());
    }

    // optional string ping = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ping());
    }

    // optional string smoni = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_smoni());
    }

    // optional string technology = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_technology());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string connection = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_connection());
    }

    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint64 tx = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_tx());
    }

    // optional uint64 rx = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_rx());
    }

    // optional int32 ip_count = 4;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ip_count());
    }

    // optional int32 signal = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_signal());
    }

    // optional int32 quality = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_quality());
    }

    // optional int32 bandwidth_ul = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bandwidth_ul());
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional int32 bandwidth_dl = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bandwidth_dl());
    }

    // optional bool ca_aggregation = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional int32 rank = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rank());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModemInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:modules.teleop.modem.ModemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ModemInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModemInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:modules.teleop.modem.ModemInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:modules.teleop.modem.ModemInfo)
    MergeFrom(*source);
  }
}

void ModemInfo::MergeFrom(const ModemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:modules.teleop.modem.ModemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_provider(from._internal_provider());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ip(from._internal_ip());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_gateway(from._internal_gateway());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_port(from._internal_port());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_dev(from._internal_dev());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_ping(from._internal_ping());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_smoni(from._internal_smoni());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_technology(from._internal_technology());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_connection(from._internal_connection());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000400u) {
      tx_ = from.tx_;
    }
    if (cached_has_bits & 0x00000800u) {
      rx_ = from.rx_;
    }
    if (cached_has_bits & 0x00001000u) {
      ip_count_ = from.ip_count_;
    }
    if (cached_has_bits & 0x00002000u) {
      signal_ = from.signal_;
    }
    if (cached_has_bits & 0x00004000u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00008000u) {
      bandwidth_ul_ = from.bandwidth_ul_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      bandwidth_dl_ = from.bandwidth_dl_;
    }
    if (cached_has_bits & 0x00020000u) {
      ca_aggregation_ = from.ca_aggregation_;
    }
    if (cached_has_bits & 0x00040000u) {
      rank_ = from.rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModemInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:modules.teleop.modem.ModemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModemInfo::CopyFrom(const ModemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:modules.teleop.modem.ModemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModemInfo::IsInitialized() const {
  return true;
}

void ModemInfo::InternalSwap(ModemInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  provider_.Swap(&other->provider_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gateway_.Swap(&other->gateway_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port_.Swap(&other->port_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dev_.Swap(&other->dev_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ping_.Swap(&other->ping_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  smoni_.Swap(&other->smoni_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  technology_.Swap(&other->technology_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  connection_.Swap(&other->connection_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModemInfo, rank_)
      + sizeof(ModemInfo::rank_)
      - PROTOBUF_FIELD_OFFSET(ModemInfo, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModemInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace modem
}  // namespace teleop
}  // namespace modules
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::modules::teleop::modem::ModemInfo* Arena::CreateMaybeMessage< ::modules::teleop::modem::ModemInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::modules::teleop::modem::ModemInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
